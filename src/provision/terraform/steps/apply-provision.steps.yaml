# This YAML file defines the steps to apply the provision of an environment with Terraform.

parameters:
  # Directory where Terraform configuration files are located.
  - name: terraformDirectory
    default: $(System.DefaultWorkingDirectory)

  # Name of the environment in Azure (e.g: qa, uat, production).
  - name: environmentId
    default: ''

  # Version of Terraform to install.
  - name: terraformVersion
    default: 'latest'

  # Name of the service connection to connect to the Terraform state storage.
  # Previously called: backendSubscription
  - name: terraformStateServiceConnectionName
    default: ''

  # Resource group containing the Terraform state storage.
  # Previously called: backendResourceGroup
  - name: terraformStateResourceGroup
    default: ''

  # Storage account containing the Terraform state storage.
  # Previously called: backendStorageAccount
  - name: terraformStateStorageAccount
    default: ''

  # Name of the service connection used to provision resources.
  # Previously called: environmentSubscription
  - name: provisioningServiceConnectionName
    default: ''

  # Prefix to use for the Terraform state storage.
  - name: terraformStateStoragePrefix
    default: ''

steps:
  # Install the specified version of Terraform.
  - task: TerraformInstaller@1
    displayName: Terraform Install
    inputs:
      terraformVersion: ${{parameters.terraformVersion}}

  # Download terraform directory from the artifact
  - task: DownloadPipelineArtifact@2
    displayName: Download Terraform Directory
    inputs:
      buildType: 'current'
      artifactName: terraform-directory
      targetPath: $(Pipeline.Workspace)/terraform

#  - task: TerraformTaskV4@4
#    displayName: Reinitialize Terraform Backend
#    inputs:
#      provider: 'azurerm'
#      command: 'init'
#      commandOptions: '-input=false'
#      workingDirectory: $(Pipeline.Workspace)/terraform
#      backendServiceArm: ${{parameters.terraformStateServiceConnectionName}}
#      backendAzureRmResourceGroupName: ${{parameters.terraformStateResourceGroup}}
#      backendAzureRmStorageAccountName: ${{parameters.terraformStateStorageAccount}}
#      backendAzureRmContainerName: ${{parameters.terraformStateStoragePrefix}}-${{parameters.environmentId}}
#      backendAzureRmKey: ${{parameters.terraformStateStoragePrefix}}-${{parameters.environmentId}}.tfstate

  - task: AzureCLI@2
    displayName: Azure CLI Login and Export Credentials
    inputs:
      azureSubscription: ${{parameters.terraformStateServiceConnectionName}}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Login and export access token details
        ACCESS_TOKEN=$(az account get-access-token --resource=https://management.azure.com --query accessToken -o tsv)
        echo "##vso[task.setvariable variable=ARM_ACCESS_TOKEN]$ACCESS_TOKEN"
        TENANT_ID=$(az account show --query tenantId -o tsv)
        echo "##vso[task.setvariable variable=ARM_TENANT_ID]$TENANT_ID"
        SUBSCRIPTION_ID=$(az account show --query id -o tsv)
        echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$SUBSCRIPTION_ID"
        CLIENT_ID=$(az account show --query user.name -o tsv)
        echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$CLIENT_ID"


  # Apply the Terraform configuration to provision resources.
  - task: TerraformTaskV4@4
    displayName: Terraform Apply
    name: TerraformApply
    inputs:
      provider: 'azurerm'
      command: 'apply'
      commandOptions: '-input=false main.tfplan'
      workingDirectory: $(Pipeline.Workspace)/terraform
      environmentServiceNameAzureRM: ${{parameters.provisioningServiceConnectionName}}
    env:
      ARM_ACCESS_TOKEN: $(ARM_ACCESS_TOKEN)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)

  # Retrieve the output from the Terraform state.
  - task: TerraformTaskV4@4
    displayName: Terraform Output
    name: TerraformOutput
    inputs:
      provider: 'azurerm'
      command: 'output'
      workingDirectory: $(Pipeline.Workspace)/terraform
      environmentServiceNameAzureRM: ${{parameters.provisioningServiceConnectionName}}
      outputFormat: json
      outputTo: file

  # Expand variables using the expand-variables.yaml template.
  - template: /src/provision/terraform/tasks/expand-variables.yaml