# Task to add a variable to the Terraform tfvars file
# This YAML script is used in an Azure DevOps pipeline to dynamically append a variable
# (name and value) to a Terraform tfvars file. The script ensures proper handling of Boolean
# values to meet Terraform's requirements, which differentiate between unquoted Booleans
# (e.g., true, false) and strings (e.g., "true", "false") and preserve their casing.

parameters:
    # The directory where the Terraform tfvars file is located. Defaults to the pipeline's working directory.
  - name: terraformDirectory
    default: '$(System.DefaultWorkingDirectory)'

    # The name of the variable to be added to the tfvars file. This should not be empty.
  - name: variableName
    default: ''

    # The value of the variable to be added to the tfvars file. It can be a string, a number, or a Boolean.
  - name: variableValue
    default: ''

steps:
  - task: Powershell@2
    displayName: Set Terraform Variable '${{ parameters.variableName }}'
    inputs:
      targetType: inline
      script: |
        $name = "${{parameters.variableName}}"
        
        # Validate that the variable name is not empty
        if ($name.Length -lt 1) {
          echo "Variable name is missing."
          exit 1
        }
        
        # Assign the variable value from the pipeline parameters
        $value = "${{parameters.variableValue}}"
        
        # Check if the value is a Boolean (case-insensitively: true/false)
        if ($value -ieq "true" -or $value -ieq "false") {
            # If the value is a Boolean, write it without quotes to match Terraform's expected format
            Add-Content ${{parameters.terraformDirectory}}/terraform.tfvars "`n`t$name = $value"
        } else {
            # If the value is not a Boolean, treat it as a string and wrap it in quotes
            Add-Content ${{parameters.terraformDirectory}}/terraform.tfvars "`n`t$name = `"$value`"" 
        }
        
        Write-Host "$name is $value"
        
        exit 0
