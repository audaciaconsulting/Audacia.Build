parameters:
  - name: name
    type: string
    default: ''
  - name: targetUrl
    type: string
    default: ''
  - name: scanType
    type: string
    default: 'quick-scan'   # Allowed values: "quick-scan" or "API"
  - name: useAjaxSpider
    type: boolean
    default: false
  - name: maxScanTime
    type: number
    default: 15  # in minutes
  - name: authorizationHeaderValue
    type: string
    default: ''  # Used for API scans; if empty, the JWT access token will be used
  - name: zapContextLocation
    type: string
    default: ''  # Used only for API scans (for alert filters etc.)
  - name: createBugsForFailures
    type: boolean
    default: false
  - name: parentCardId
    type: string
    default: ''
  - name: organisationUri
    type: string
    default: '$(System.TeamFoundationCollectionUri)'
  - name: projectName
    type: string
    default: '$(System.TeamProject)'

steps:
  # 1. Verify that the initialization step has run.
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Verify Initialization'
    inputs:
      targetType: 'inline'
      script: |
        if (-not (Test-Path -Path "$(parentWorkingTempDirectory)")) {
          throw "Initialization must be run before the scan. Please ensure initialize.yaml is included."
        }

  # 2. Create a working directory for this scan.
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Create Scan Working Directory'
    inputs:
      targetType: 'inline'
      script: |
        New-Item -Path "$(parentWorkingTempDirectory)" -Name "${{ parameters.name }}" -ItemType "directory"
        $NewDirectoryFullPath = "$(parentWorkingTempDirectory)/${{ parameters.name }}"
        Write-Host "##vso[task.setvariable variable=workingTempDirectory]$NewDirectoryFullPath"
        chmod a+w "$NewDirectoryFullPath"
        Write-Output "Created working folder at $NewDirectoryFullPath"

  # 3. Dynamically generate the ZAP Automation Framework configuration file.
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Generate ZAP Automation Config'
    inputs:
      targetType: 'inline'
      script: |
        # Determine the base URL. If the targetUrl contains '/swagger', remove that portion.
        $target = '${{ parameters.targetUrl }}'
        if ($target -match "/swagger") {
            $baseUrl = $target -replace "/swagger.*", ""
        } else {
            $baseUrl = $target
        }
        
        # Begin building the configuration file content.
        $configContent = @()
        $configContent += "---"
        $configContent += "env:"
        # For API scans with a bearer token, add the token as a global HTTP header.
        if ('${{ parameters.scanType }}' -eq 'API' -and '${{ parameters.authorizationHeaderValue }}' -ne '') {
            $configContent += "  httpHeaders:"
            $configContent += "  - name: Authorization"
            $configContent += "    value: '${{ parameters.authorizationHeaderValue }}'"
        }
        $configContent += "  contexts:"
        $configContent += "  - name: 'Authentication Test'"
        $configContent += "    urls:"
        $configContent += "    - '$baseUrl'"
        $configContent += "    includePaths:"
        $configContent += "    - '$baseUrl.*'"
        $configContent += "    excludePaths: []"
        # For non-API scans, you might include an authentication block.
        if ('${{ parameters.scanType }}' -ne 'API') {
            $configContent += "    authentication:"
            $configContent += "      method: 'browser'"
            $configContent += "      parameters:"
            $configContent += "        loginPageUrl: '$baseUrl/Account/Login?ReturnUrl=%2Fconnect%2Fauthorize...'"
            $configContent += "        loginPageWait: 2"
            $configContent += "        browserId: 'firefox'"
            $configContent += "    verification:"
            $configContent += "      method: 'poll'"
            $configContent += "      loggedInRegex: '\\Q 200 OK\\E'"
            $configContent += "      loggedOutRegex: '\\Q 401 Unauthorized\\E'"
            $configContent += "      pollFrequency: 60"
            $configContent += "      pollUnits: 'requests'"
            $configContent += "      pollUrl: '$baseUrl/connect/userinfo'"
            $configContent += "      pollPostData: ''"
            $configContent += "      pollAdditionalHeaders:"
            $configContent += "      - header: 'content-type'"
            $configContent += "        value: 'application/x-www-form-urlencoded'"
        }
        $configContent += "    sessionManagement:"
        $configContent += "      method: 'headers'"
        $configContent += "      parameters:"
        $configContent += "        Cookie: '.AspNetCore.Antiforgery.cdV5uW_Ejgc={%cookie:.AspNetCore.Antiforgery.cdV5uW_Ejgc%}; ARRAffinity=REDACTED; ARRAffinitySameSite=REDACTED'"
        $configContent += "    technology:"
        $configContent += "      exclude: []"
        # The users block has been removed â€“ for a bearer token this is unnecessary.
        $configContent += "  parameters:"
        $configContent += "    failOnError: true"
        $configContent += "    failOnWarning: false"
        $configContent += "    progressToStdout: true"
        $configContent += "  vars: {}"
        
        $configContent += "jobs:"
        $configContent += "  - parameters:"
        $configContent += "      scanOnlyInScope: true"
        $configContent += "      enableTags: false"
        $configContent += "      disableAllRules: false"
        $configContent += "    rules: []"
        $configContent += "    name: 'passiveScan-config'"
        $configContent += "    type: 'passiveScan-config'"
        $configContent += "  - parameters: {}"
        $configContent += "    name: 'spider'"
        $configContent += "    type: 'spider'"
        $configContent += "    tests:"
        $configContent += "    - onFail: 'INFO'"
        $configContent += "      statistic: 'automation.spider.urls.added'"
        $configContent += "      site: ''"
        $configContent += "      operator: '>='"
        $configContent += "      value: 100"
        $configContent += "      type: 'stats'"
        $configContent += "      name: 'At least 100 URLs found'"
        $configContent += "  - parameters:"
        $configContent += "      maxDuration: ${{ parameters.maxScanTime }}"
        $configContent += "      maxCrawlDepth: 10"
        $configContent += "      numberOfBrowsers: 32"
        $configContent += "      inScopeOnly: true"
        $configContent += "    name: 'spiderAjax'"
        $configContent += "    type: 'spiderAjax'"
        $configContent += "    tests:"
        $configContent += "    - onFail: 'INFO'"
        $configContent += "      statistic: 'spiderAjax.urls.added'"
        $configContent += "      site: ''"
        $configContent += "      operator: '>='"
        $configContent += "      value: 100"
        $configContent += "      type: 'stats'"
        $configContent += "      name: 'At least 100 URLs found'"
        $configContent += "  - parameters: {}"
        $configContent += "    name: 'passiveScan-wait'"
        $configContent += "    type: 'passiveScan-wait'"
        $configContent += "  - parameters:"
        $configContent += "      template: 'risk-confidence-html'"
        $configContent += "      reportTitle: 'ZAP Scanning Report'"
        $configContent += "      reportDescription: ''"
        $configContent += "    name: 'report'"
        $configContent += "    type: 'report'"
        
        $configFilePath = "$(workingTempDirectory)/zap-automation.yaml"
        $finalConfig = $configContent -join "`n"
        $finalConfig | Out-File -FilePath $configFilePath -Encoding UTF8
        Write-Output "Generated zap-automation.yaml at $configFilePath"
        Write-Output "Configuration content:"
        Write-Output $finalConfig

  # 4. Publish the generated configuration file as a build artifact.
  - task: PublishBuildArtifacts@1
    displayName: '${{ parameters.name }}: Publish ZAP Automation Config Artifact'
    inputs:
      pathtoPublish: '$(workingTempDirectory)/zap-automation.yaml'
      artifactName: 'zap-automation-config'
      publishLocation: 'Container'

  # 5. Log the configuration file for debugging purposes.
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Log ZAP Automation Config'
    inputs:
      targetType: 'inline'
      script: |
        Write-Output "Contents of zap-automation.yaml:"
        Get-Content "$(workingTempDirectory)/zap-automation.yaml" | Write-Output

  - task: Bash@3
    displayName: 'Debug: List mounted directory'
    inputs:
      targetType: 'inline'
      script: |
        docker run --rm --mount type=bind,source="$(workingTempDirectory)",target=/zap -w /zap alpine ls -l /zap

  - task: Bash@3
    displayName: 'Debug: Find zap.sh location'
    inputs:
      targetType: 'inline'
      script: |
        docker run --rm ghcr.io/zaproxy/zaproxy:stable sh -c "find / -name zap.sh 2>/dev/null || true"

  # 6. Run the OWASP ZAP Automation scan via Docker.
  - task: Bash@3
    displayName: '${{ parameters.name }}: Run OWASP ZAP Automation Scan'
    inputs:
      targetType: 'inline'
      script: |
        docker run --rm --mount type=bind,source="$(workingTempDirectory)",target=/zap/wrk -w /zap ghcr.io/zaproxy/zaproxy:stable /zap/zap.sh -cmd -autorun /zap/wrk/zap-automation.yaml

#  # 7. Transform the XML report to NUnit format so that alerts appear as test cases in DevOps.
#  - task: PowerShell@2
#    displayName: '${{ parameters.name }}: Transform XML Report to NUnit Format'
#    inputs:
#      targetType: 'inline'
#      script: |
#        $XslPath = "$(parentWorkingTempDirectory)/OWASPToNUnit3.xslt"
#        $XmlInputPath = "$(workingTempDirectory)/Report.xml"
#        $XmlOutputPath = "$(workingTempDirectory)/NUnit-Report.xml"
#        $XslTransform = New-Object System.Xml.Xsl.XslCompiledTransform
#        Write-Output "Transforming Report.xml into NUnit-Report.xml"
#        $XslTransform.Load($XslPath)
#        $XslTransform.Transform($XmlInputPath, $XmlOutputPath)
#
#  # 8. Create bug work items if configured.
#  - ${{ if eq(parameters.createBugsForFailures, true) }}:
#      - template: ./create-bugs.yaml
#        parameters:
#          parentCardId: ${{ parameters.parentCardId }}
#          organisationUri: ${{ parameters.organisationUri }}
#          projectName: ${{ parameters.projectName }}
#          name: ${{ parameters.name }}

  # 9. Publish the raw XML and HTML reports as build artifacts.
  - task: PublishBuildArtifacts@1
    displayName: '${{ parameters.name }}: Publish XML Report Artifact'
    inputs:
      pathtoPublish: '$(workingTempDirectory)/Report.xml'
      artifactName: '${{ parameters.name }}-XML'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: '${{ parameters.name }}: Publish HTML Report Artifact'
    inputs:
      pathtoPublish: '$(workingTempDirectory)/Report.html'
      artifactName: '${{ parameters.name }}-HTML'
      publishLocation: 'Container'

  # 10. Publish the transformed report as test results so that alerts are visible as test failures.
  - task: PublishTestResults@2
    displayName: '${{ parameters.name }}: Publish Scan Results as Test Results'
    inputs:
      testRunTitle: '${{ parameters.name }}'
      testRunner: 'NUnit'
      testResultsFiles: '**/NUnit-Report.xml'
      searchFolder: '$(workingTempDirectory)'
      publishRunAttachments: false

  # 11. Set the alerts flag if any non-false-positive alerts exist (parsing Report.xml).
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Set Alerts Exist Flag If Required'
    inputs:
      targetType: 'inline'
      script: |
        $Alerts = Select-Xml -Path "$(workingTempDirectory)/Report.xml" -XPath "//*[local-name()='alertitem'][not(.//confidence='0')]"
        if ($Alerts.Count -gt 0) {
          Write-Output "Alerts detected; setting alertsExist variable to true."
          Write-Host "##vso[task.setvariable variable=alertsExist]true"
        }
    condition: and(succeeded(), ne(variables.alertsExist, 'true'))
