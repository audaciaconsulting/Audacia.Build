# zap-automation-scan.yaml
# -------------------------------------------
# This template runs the OWASP ZAP Automation scan using a pre‐generated configuration file.
#
# Parameters:
#   name:                  The name of the scan. Example: "API Scan"
#   createBugsForFailures: Boolean flag to indicate if bugs should be created for failures. Example: false
#   parentCardId:          (Optional) Parent work item/card identifier for bug creation. Example: "12345"
#   organisationUri:       Organisation URI in Azure DevOps. Example: "$(System.TeamFoundationCollectionUri)"
#   projectName:           Project name in Azure DevOps. Example: "$(System.TeamProject)"
# -------------------------------------------
parameters:
  - name: name
    type: string
    default: ''  # Name of the scan. Example: "API Scan"
  - name: createBugsForFailures
    type: boolean
    default: false  # Set to true to create bug work items for scan failures. Example: false
  - name: parentCardId
    type: string
    default: ''  # Parent work item/card identifier for bug creation. Example: "12345"
  - name: organisationUri
    type: string
    default: '$(System.TeamFoundationCollectionUri)'  # Organisation URI in Azure DevOps
  - name: projectName
    type: string
    default: '$(System.TeamProject)'  # Project name in Azure DevOps

steps:
  # Verify that the initialization step has run.
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Verify Initialization'
    inputs:
      targetType: 'inline'
      script: |
        if (-not (Test-Path -Path "$(parentWorkingTempDirectory)")) {
          throw "Initialization must be run before the scan. Please ensure initialize.yaml is included."
        }

  # Create a working directory for this scan.
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Create Scan Working Directory'
    inputs:
      targetType: 'inline'
      script: |
        New-Item -Path "$(parentWorkingTempDirectory)" -Name "${{ parameters.name }}" -ItemType "directory"
        $NewDirectoryFullPath = "$(parentWorkingTempDirectory)/${{ parameters.name }}"
        Write-Host "##vso[task.setvariable variable=workingTempDirectory]$NewDirectoryFullPath"
        chmod a+w "$NewDirectoryFullPath"
        Write-Output "Created working folder at $NewDirectoryFullPath"

  # Download the pre‐generated ZAP Automation configuration artifact "zap-automation-config".
  - task: DownloadBuildArtifacts@0
    displayName: '${{ parameters.name }}: Download ZAP Automation Config Artifact'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'zap-automation-config'
      downloadPath: '$(workingTempDirectory)/zap-config'

  # Run the OWASP ZAP Automation scan via Docker.
  - task: Bash@3
    displayName: '${{ parameters.name }}: Run OWASP ZAP Automation Scan'
    inputs:
      targetType: 'inline'
      script: |
        # Note: the config file is downloaded as an artifact into:
        #   $(workingTempDirectory)/zap-config/zap-automation-config/zap-automation.yaml
        docker run --rm --mount type=bind,source="$(workingTempDirectory)",target=/zap/wrk -w /zap ghcr.io/zaproxy/zaproxy:stable /zap/zap.sh -cmd -autorun /zap/wrk/zap-config/zap-automation-config/zap-automation.yaml

  # Rename the generated report files to fixed names.
  - task: PowerShell@2
    displayName: 'Rename ZAP XML Report'
    inputs:
      targetType: 'inline'
      script: |
        # Look for the XML report (generated by the reportXml job)
        $xmlFiles = Get-ChildItem -Path "$(workingTempDirectory)" -Recurse -Filter "*ZAP-Report*.xml"
        if ($xmlFiles.Count -eq 0) {
            Write-Error "No ZAP XML report file was found."
            exit 1
        }
        $xmlReport = $xmlFiles[0].FullName
        Write-Output "Found XML report file: $xmlReport"
        $destXml = Join-Path "$(workingTempDirectory)" "Report.xml"
        Copy-Item -Path $xmlReport -Destination $destXml -Force
        Write-Output "Renamed XML report file to: $destXml"

  - task: PowerShell@2
    displayName: 'Rename ZAP HTML Report'
    inputs:
      targetType: 'inline'
      script: |
        # Look for the HTML report (generated by the reportHtml job)
        $htmlFiles = Get-ChildItem -Path "$(workingTempDirectory)" -Recurse -Filter "*ZAP-Report*.html"
        if ($htmlFiles.Count -eq 0) {
            Write-Error "No ZAP HTML report file was found."
            exit 1
        }
        $htmlReport = $htmlFiles[0].FullName
        Write-Output "Found HTML report file: $htmlReport"
        $destHtml = Join-Path "$(workingTempDirectory)" "Report.html"
        Copy-Item -Path $htmlReport -Destination $destHtml -Force
        Write-Output "Renamed HTML report file to: $destHtml"

  # Transform the XML report to NUnit format so that alerts appear as test cases in DevOps.
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Transform XML Report to NUnit Format'
    inputs:
      targetType: 'inline'
      script: |
        $XslPath = "$(parentWorkingTempDirectory)/OWASPToNUnit3.xslt"
        $XmlInputPath = "$(workingTempDirectory)/Report.xml"
        $XmlOutputPath = "$(workingTempDirectory)/NUnit-Report.xml"
        $XslTransform = New-Object System.Xml.Xsl.XslCompiledTransform
        Write-Output "Transforming Report.xml into NUnit-Report.xml"
        $XslTransform.Load($XslPath)
        $XslTransform.Transform($XmlInputPath, $XmlOutputPath)

  # Create bug work items if configured.
  - ${{ if eq(parameters.createBugsForFailures, true) }}:
      - template: ./create-bugs.yaml
        parameters:
          parentCardId: ${{ parameters.parentCardId }}
          organisationUri: ${{ parameters.organisationUri }}
          projectName: ${{ parameters.projectName }}
          name: ${{ parameters.name }}

  # Publish the raw XML and HTML reports as build artifacts.
  - task: PublishBuildArtifacts@1
    displayName: '${{ parameters.name }}: Publish XML Report Artifact'
    inputs:
      pathtoPublish: '$(workingTempDirectory)/Report.xml'
      artifactName: '${{ parameters.name }}-XML'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: '${{ parameters.name }}: Publish HTML Report Artifact'
    inputs:
      pathtoPublish: '$(workingTempDirectory)/Report.html'
      artifactName: '${{ parameters.name }}-HTML'
      publishLocation: 'Container'

  # Publish the transformed report as test results so that alerts are visible as test failures.
  - task: PublishTestResults@2
    displayName: '${{ parameters.name }}: Publish Scan Results as Test Results'
    inputs:
      testRunTitle: '${{ parameters.name }}'
      testRunner: 'NUnit'
      testResultsFiles: '**/NUnit-Report.xml'
      searchFolder: '$(workingTempDirectory)'
      publishRunAttachments: false

  # Set the alerts flag if any non-false-positive alerts exist (parsing Report.xml).
  - task: PowerShell@2
    displayName: '${{ parameters.name }}: Set Alerts Exist Flag If Required'
    inputs:
      targetType: 'inline'
      script: |
        $Alerts = Select-Xml -Path "$(workingTempDirectory)/Report.xml" -XPath "//*[local-name()='alertitem'][not(.//confidence='0')]"
        if ($Alerts.Count -gt 0) {
          Write-Output "Alerts detected; setting alertsExist variable to true."
          Write-Host "##vso[task.setvariable variable=alertsExist]true"
        }
    condition: and(succeeded(), ne(variables.alertsExist, 'true'))
