# Performs an OWASP ZAP scan of the configured website, and produces a security vulnerability report
parameters:
  - name: name # REQUIRED: A name for the scan (allowed characters: space, a-z, A-Z, 0-9, _ and -). Must be unique within a job
    default: ''
  - name: scanType # REQUIRED: [ Baseline, Full, API ], using API requires the targetUrl be an open api endpoint, i.e. 'https://example.com/swagger/v1/swagger.json'
    default: ''
  - name: targetUrl # REQUIRED: Either url to attack for baseline/full scans, or the /swagger.json open API definition url for API scans
    default: ''
  - name: username # OPTIONAL: The username for the user (required for authorization using a context file)
    default: ''
  - name: password # OPTIONAL: The password for the user (required for authorization using a context file)
    default: ''

env:                                      # The environment, mandatory
  contexts:                               # List of 1 or more contexts, mandatory
    - name: context 1                     # Name to be used to refer to this context in other jobs, mandatory
      url: ${{parameters.targetUrl}}         # The top level url, mandatory, everything under this will be included
      authentication:                     # TBA: In time to cover all auth configs
      users:                              # List of one or more users available to use for authentication
        - name:                          # String, the name to be used by the jobs
          credentials: # List of user credentials - may include any required for scripts
            username: ${{parameters.username}}                   # String, the username to use when authenticating, vars supported
            password: ${{parameters.password}}                   # String, the password to use when authenticating, vars supported
  parameters:
    failOnError: true                  # If set exit on an error
    failOnWarning: false               # If set exit on a warning
    progressToStdout: true             # If set will write job progress to stdout

jobs:
  - type: addOns                       # Add-on management
    parameters:
      updateAddOns: true               # Update any add-ons that have new versions
    install:                           # A list of non standard add-ons to install from the ZAP Marketplace
      - ascanrules
      - ascanrulesAlpha
      - ascanrulesBeta
      - pscanrulesBeta
      - pscanrulesAlpha
      - automation
      - domxss
      - graphql
      - openapi
      - reflect
      - reports
      - soap
      - spiderAjax
    uninstall:                         # A list of standard add-ons to uninstall
  - type: passiveScan-config           # Passive scan configuration
    parameters:
      maxAlertsPerRule: 10             # Int: Maximum number of alerts to raise per rule
      scanOnlyInScope: true            # Bool: Only scan URLs in scope (recommended)
      maxBodySizeInBytesToScan: 0       # Int: Maximum body size to scan, default: 0 - will scan all messages
      enableTags: false                # Bool: Enable passive scan tags, default: false - enabling them can impact performance
      disableAllRules: false           # Bool: If true then will disable all rules before applying the settings in the rules section
    rules:                             # A list of one or more passive scan rules and associated settings which override the defaults
      - id: None

  - type: spider                       # The traditional spider - fast but doesnt handle modern apps so well
    parameters:
      context: context 1                        # String: Name of the context to spider, default: first context
      url:                             # String: Url to start spidering from, default: first context URL
      failIfFoundUrlsLessThan:         # Int: Fail if spider finds less than the specified number of URLs, default: 0
      warnIfFoundUrlsLessThan:         # Int: Warn if spider finds less than the specified number of URLs, default: 0
      maxDuration:                     # Int: The max time in minutes the spider will be allowed to run for, default: 0 unlimited
      maxDepth:                        # Int: The maximum tree depth to explore, default 5
      maxChildren:                     # Int: The maximum number of children to add to each node in the tree
      acceptCookies:                   # Bool: Whether the spider will accept cookies, default: true
      handleODataParametersVisited:    # Bool: Whether the spider will handle OData responses, default: false
      handleParameters:                # Enum [ignore_completely, ignore_value, use_all]: How query string parameters are used when checking if a URI has already been visited, default: use_all
      maxParseSizeBytes:               # Int: The max size of a response that will be parsed, default: 2621440 - 2.5 Mb
      parseComments:                   # Bool: Whether the spider will parse HTML comments in order to find URLs, default: true
      parseGit:                        # Bool: Whether the spider will parse Git metadata in order to find URLs, default: false
      parseRobotsTxt:                  # Bool: Whether the spider will parse 'robots.txt' files in order to find URLs, default: true
      parseSitemapXml:                 # Bool: Whether the spider will parse 'sitemap.xml' files in order to find URLs, default: true
      parseSVNEntries:                 # Bool: Whether the spider will parse SVN metadata in order to find URLs, default: false
      postForm:                        # Bool: Whether the spider will submit POST forms, default: true
      processForm:                     # Bool: Whether the spider will process forms, default: true
      requestWaitTime:                 # Int: The time between the requests sent to a server in milliseconds, default: 200
      sendRefererHeader:               # Bool: Whether the spider will send the referer header, default: true
      threadCount:                     # Int: The number of spider threads, default: 2
      userAgent:                       # String: The user agent to use in requests, default: '' - use the default ZAP one
  - type: passiveScan-wait             # Passive scan wait for the passive scanner to finish
    parameters:
      maxDuration: 0                   # Int: The max time to wait for the passive scanner, default: 0 unlimited

  - type: report                       # Report generation
    parameters:
      template:                        # String: The template id, default : traditional-html
      reportDir: /tmp/zap/    # String: The directory into which the report will be written
      reportFile:                      # String: The report file name pattern, default: {yyyy-MM-dd}-ZAP-Report-[[site]]
      reportTitle: test-report                    # String: The report title
      reportDescription: test-desc              # String: The report description
      displayReport:                   # Boolean: Display the report when generated, default: false
    risks:                             # List: The risks to include in this report, default all
      - high
      - medium
      - low
      - info

    confidences:                       # List: The confidences to include in this report, default all
      - high
      - medium
      - low
      - falsepositive

    sections:                          # List: The template sections to include in this report - see the relevant template, default all