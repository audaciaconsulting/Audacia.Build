parameters:
  - name: runNpm
    type: boolean
    default: 'true'
  - name: runDotnet
    type: boolean
    default: 'true'
  - name: downloadArtifact
    type: boolean
    default: 'false'           # Set true to download an SBOM artifact produced by a generation job.
  - name: artifactName
    type: string
    default: 'sbom-files'
  - name: sbomDirectory
    type: string
    default: '$(Agent.TempDirectory)\sbom'
  - name: npmSbomFileName
    type: string
    default: 'sbom-npm-file.json'
  - name: dotnetSbomFileName
    type: string
    default: 'sbom-dotnet-file.json'
  - name: grypeOutputFormat
    type: string
    default: 'cyclonedx-json'   # (Other valid output types are accepted per Grype docs.)
  - name: npmVulnOutputFile
    type: string
    default: 'vuln-npm.json'
  - name: dotnetVulnOutputFile
    type: string
    default: 'vuln-dotnet.json'
  - name: failOnSeverity
    type: string
    default: 'low'
  - name: grypeInstallUrl
    type: string
    default: 'https://raw.githubusercontent.com/anchore/grype/main/install.sh'
  - name: vulnFolder
    type: string
    default: '$(Agent.TempDirectory)\vuln'
  - name: vulnArtifactName
    type: string
    default: 'vuln-files'
  # These parameters let you specify the SBOM input specifier (defaults to "sbom:" for Grype).
  - name: npmSbomInputSpecifier
    type: string
    default: 'sbom:'
  - name: dotnetSbomInputSpecifier
    type: string
    default: 'sbom:'

jobs:
  - job: AnalyzeSBOM
    displayName: 'Analyze SBOM'
    steps:
      ${{ if eq(parameters.downloadArtifact, true) }}:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download SBOM Artifact'
          inputs:
            buildType: 'current'
            artifact: ${{ parameters.artifactName }}
            path: ${{ parameters.sbomDirectory }}

        - task: PowerShell@2
          displayName: 'Install Grype'
          inputs:
            targetType: 'inline'
            script: |
              curl.exe -sSfL ${{ parameters.grypeInstallUrl }} | sh -s -- -b $(Agent.TempDirectory)

        - task: PowerShell@2
          displayName: 'Create vulnerability folder'
          inputs:
            targetType: 'inline'
            script: |
              mkdir "${{ parameters.vulnFolder }}"
        
        # Run Grype on the NPM SBOM if enabled.
        - ${{ if eq(parameters.runNpm, true) }}:
            - task: PowerShell@2
              displayName: 'Run Grype on NPM SBOM'
              name: GrypeNpm
              inputs:
                targetType: 'inline'
                script: |
                  # Check if any Grype process is already running.
                  $existingGrype = Get-Process -Name "grype" -ErrorAction SilentlyContinue
                  if ($existingGrype) {
                      Write-Host "Grype process already running. Waiting..."
                      Start-Sleep -Seconds 10
                  }
                  
                  # Attempt the scan with retries.
                  $retryCount = 5
                  $retryDelay = 10
                  $success = $false
                  
                  for ($i = 0; $i -lt $retryCount; $i++) {
                    try {
                      & "$(Agent.TempDirectory)\grype.exe" "${{ parameters.npmSbomInputSpecifier }}${{ parameters.sbomDirectory }}\${{ parameters.npmSbomFileName }}" --fail-on ${{ parameters.failOnSeverity }} -o ${{ parameters.grypeOutputFormat }}="${{ parameters.vulnFolder }}\${{ parameters.npmVulnOutputFile }}" -o table
                      $success = $true
                      break
                    } catch {
                      Write-Host "Attempt $($i + 1) failed. Retrying in $retryDelay seconds..."
                      Start-Sleep -Seconds $retryDelay
                    }
                  }
                  
                  if (-not $success) {
                    Write-Error "Grype failed after $retryCount attempts."
                    exit 1
                  }
                  
                  $exitNpm = $LASTEXITCODE
                  Write-Host "Grype NPM Exit Code: $exitNpm"
                  Write-Host "##vso[task.setvariable variable=GrypeNpmExitCode]$exitNpm"
                  
                  # Retry removal of temporary files.
                  $tempFilePath = "C:\Users\VSSADM~1\AppData\Local\Temp\grype-db-listing*"
                  $retryRemoveCount = 5
                  $removeDelay = 5
                  for ($j = 0; $j -lt $retryRemoveCount; $j++) {
                      try {
                          Remove-Item -Path $tempFilePath -Force -ErrorAction Stop
                          Write-Host "Removed Grype temp files."
                          break
                      } catch {
                          Write-Host "Removal attempt $($j + 1) failed. Retrying..."
                          Start-Sleep -Seconds $removeDelay
                      }
                  }
                continueOnError: true
        
        # Run Grype on the .NET SBOM if enabled.
        - ${{ if eq(parameters.runDotnet, true) }}:
            - task: PowerShell@2
              displayName: 'Run Grype on .NET SBOM'
              name: GrypeDotnet
              inputs:
                targetType: 'inline'
                script: |
                  & "$(Agent.TempDirectory)\grype.exe" "${{ parameters.dotnetSbomInputSpecifier }}${{ parameters.sbomDirectory }}\${{ parameters.dotnetSbomFileName }}" --fail-on ${{ parameters.failOnSeverity }} -o ${{ parameters.grypeOutputFormat }}="${{ parameters.vulnFolder }}\${{ parameters.dotnetVulnOutputFile }}" -o table
                  $exitDotnet = $LASTEXITCODE
                  Write-Host "Grype .NET Exit Code: $exitDotnet"
                  Write-Host "##vso[task.setvariable variable=GrypeDotnetExitCode]$exitDotnet"
                continueOnError: true

        - task: PublishPipelineArtifact@1
          displayName: 'Publish vulnerability report'
          inputs:
            targetPath: ${{ parameters.vulnFolder }}
            publishLocation: pipeline
            artifact: ${{ parameters.vulnArtifactName }}

        - task: PowerShell@2
          displayName: 'Fail pipeline if vulnerabilities found'
          inputs:
            targetType: 'inline'
            script: |
              # If an analysis step was executed and its exit code is non-zero, fail the pipeline.
              $fail = $false
              if ('${{ parameters.runNpm }}' -eq 'true' -and $(GrypeNpmExitCode) -and ([int]$(GrypeNpmExitCode) -ne 0)) {
                Write-Host "NPM vulnerabilities detected."
                $fail = $true
              }
              if ('${{ parameters.runDotnet }}' -eq 'true' -and $(GrypeDotnetExitCode) -and ([int]$(GrypeDotnetExitCode) -ne 0)) {
                Write-Host ".NET vulnerabilities detected."
                $fail = $true
              }
              if ($fail) {
                Write-Error "Dependency vulnerabilities detected. Failing pipeline."
                exit 1
              }
