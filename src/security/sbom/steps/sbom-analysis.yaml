# sbom-analysis.yaml
parameters:
  - name: sbomDir
    type: string
    default: '$(Agent.TempDirectory)/sbom'       # Directory containing the SBOM files to be analyzed.
  - name: sbomGlob
    type: string
    default: 'sbom-*.json'                         # Glob pattern to match SBOM files for analysis.
  - name: analysisOutputFormat
    type: string
    default: 'cyclonedx-json'                     # Output format for Grype vulnerability analysis.
  - name: vulnFolder
    type: string
    default: '$(Agent.TempDirectory)/vuln'         # Directory where vulnerability reports will be stored.
  - name: downloadArtifact
    type: boolean
    default: false                                # If true, download the SBOM artifact before analysis.
  - name: sbomArtifactName
    type: string
    default: 'sbom-files'                         # The name of the SBOM artifact published during generation.
  - name: grypeInstallDir
    type: string
    default: '$(Agent.TempDirectory)'             # Directory where Grype (the vulnerability scanner) will be installed.

steps:
  # Optionally download the SBOM artifact if needed.
  - ${{ if eq(parameters.downloadArtifact, true) }}:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download SBOM Artifact'
        inputs:
          buildType: 'current'
          artifact: ${{ parameters.sbomArtifactName }}
          path: ${{ parameters.sbomDir }}

  - task: PowerShell@2
    displayName: 'Install Grype'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Installing Grype into $env:grypeInstallDir"
        curl.exe -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b "${{ parameters.grypeInstallDir }}"

  - task: PowerShell@2
    displayName: 'Create vulnerability folder'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Creating vulnerability folder: ${{ parameters.vulnFolder }}"
        if (!(Test-Path "${{ parameters.vulnFolder }}")) {
            New-Item -ItemType Directory -Path "${{ parameters.vulnFolder }}" | Out-Null
        }

  # Loop over each SBOM file (matching the provided glob) and run Grype to generate a vulnerability report.
  - task: PowerShell@2
    displayName: 'Run Grype on All SBOM Files'
    inputs:
      targetType: 'inline'
      script: |
        $sbomFiles = Get-ChildItem -Path "${{ parameters.sbomDir }}" -Filter "${{ parameters.sbomGlob }}"
        if ($sbomFiles.Count -eq 0) {
            Write-Host "No SBOM files found matching pattern '${{ parameters.sbomGlob }}' in ${env:sbomDir}"
            exit 0
        }
        $overallExit = 0
        foreach ($file in $sbomFiles) {
            $vulnOutput = Join-Path "${{ parameters.vulnFolder }}" ("vuln-" + $file.BaseName + ".json")
            Write-Host "Running Grype on SBOM file: $($file.FullName). Output: $vulnOutput"
            & "${{ parameters.grypeInstallDir }}/grype.exe" sbom:$($file.FullName) --fail-on low -o ${{ parameters.analysisOutputFormat }}=$vulnOutput -o table
            if ($LASTEXITCODE -ne 0) {
                Write-Host "Grype reported vulnerabilities for $($file.Name) with exit code $LASTEXITCODE"
                $overallExit = 1
            }
        }
        Write-Host "Overall Grype analysis exit code: $overallExit"
        Write-Host "##vso[task.setvariable variable=OverallGrypeExitCode]$overallExit"
        exit $overallExit

  # Compute a unique suffix for the vulnerability report artifact name.
  - task: PowerShell@2
    displayName: 'Set unique artifact suffix'
    inputs:
      targetType: 'inline'
      script: |
        $uniqueSuffix = (Get-Date -Format "yyyyMMddHHmmss")
        Write-Host "##vso[task.setvariable variable=UniqueSuffix]$uniqueSuffix"

  # Publish the vulnerability reports as a pipeline artifact.
  - task: PublishPipelineArtifact@1
    displayName: 'Publish vulnerability report'
    inputs:
      targetPath: ${{ parameters.vulnFolder }}
      publishLocation: 'pipeline'
      artifact: "$(UniqueSuffix)-${{ parameters.sbomArtifactName }}-vuln-report"

  # Fail the pipeline if any vulnerabilities were detected.
  - task: PowerShell@2
    displayName: 'Fail pipeline if vulnerabilities found'
    inputs:
      targetType: 'inline'
      script: |
        if ("$(OverallGrypeExitCode)" -ne "0") {
          Write-Error "Dependency vulnerabilities detected. Failing pipeline."
          exit 1
        }
