# sbom-analysis.yaml
parameters:
  - name: sbomDir
    type: string
    default: '$(Agent.TempDirectory)/sbom'       # Directory containing the SBOM files.
  - name: analyzeNpm
    type: boolean
    default: true                                # Analyze the npm SBOM if true.
  - name: analyzeDotnet
    type: boolean
    default: true                                # Analyze the .NET SBOM if true.
  - name: analysisOutputFormat
    type: string
    default: 'cyclonedx-json'                    # Output format for Grype analysis.
  - name: vulnFolder
    type: string
    default: '$(Agent.TempDirectory)/vuln'        # Local folder to store vulnerability reports.
  - name: downloadArtifact
    type: boolean
    default: false                               # If true, download the SBOM artifact before analysis.
  - name: sbomArtifactName
    type: string
    default: 'sbom-files'                        # The name of the SBOM artifact published in the generation stage.
  - name: grypeInstallDir
    type: string
    default: '$(Agent.TempDirectory)'            # Directory where Grype will be installed.
  - name: failOnVulnerabilities
    type: boolean
    default: true                                # Fail the pipeline if vulnerabilities are found.

steps:
  # Download the SBOM artifact if requested.
  - ${{ if eq(parameters.downloadArtifact, true) }}:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download SBOM Artifact'
        inputs:
          buildType: 'current'
          artifact: ${{ parameters.sbomArtifactName }}
          path: ${{ parameters.sbomDir }}

  - task: PowerShell@2
    displayName: 'Install Grype'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Installing Grype into $env:grypeInstallDir"
        curl.exe -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b "${{ parameters.grypeInstallDir }}"

  - task: PowerShell@2
    displayName: 'Create vulnerability folder'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Creating vulnerability folder: ${{ parameters.vulnFolder }}"
        mkdir "${{ parameters.vulnFolder }}"
  
  # Analyze the npm SBOM if enabled.
  - ${{ if eq(parameters.analyzeNpm, true) }}:
      - task: PowerShell@2
        displayName: 'Run Grype on NPM SBOM'
        name: GrypeNpm
        inputs:
          targetType: 'inline'
          script: |
            $sbomPath = "${{ parameters.sbomDir }}/sbom-npm-file.json"
            $vulnOutput = "${{ parameters.vulnFolder }}/vuln-npm.json"
            Write-Host "Running Grype on NPM SBOM: $sbomPath"
            
            $retryCount = 5
            $retryDelay = 10
            $success = $false
            
            for ($i = 0; $i -lt $retryCount; $i++) {
              try {
                & "${{ parameters.grypeInstallDir }}/grype.exe" sbom:$sbomPath --fail-on low -o ${{ parameters.analysisOutputFormat }}=$vulnOutput -o table
                $success = $true
                break
              } catch {
                Write-Host "Attempt $($i+1) failed. Retrying in $retryDelay seconds..."
                Start-Sleep -Seconds $retryDelay
              }
            }
            
            if (-not $success) {
              Write-Error "Grype failed after $retryCount attempts."
              exit 1
            }
            
            $exitNpm = $LASTEXITCODE
            Write-Host "Grype NPM Exit Code: $exitNpm"
            Write-Host "##vso[task.setvariable variable=GrypeNpmExitCode]$exitNpm"
            
            # Cleanup temporary Grype files with retries.
            $tempFilePath = "C:\Users\VSSADM~1\AppData\Local\Temp\grype-db-listing*"
            $retryRemoveCount = 5
            $removeDelay = 5
            for ($j = 0; $j -lt $retryRemoveCount; $j++) {
              try {
                Remove-Item -Path $tempFilePath -Force -ErrorAction Stop
                Write-Host "Successfully removed Grype temp files."
                break
              } catch {
                Write-Host "Attempt $($j+1) to remove temp files failed. Retrying in $removeDelay seconds..."
                Start-Sleep -Seconds $removeDelay
              }
            }
  
  # Analyze the .NET SBOM if enabled.
  - ${{ if eq(parameters.analyzeDotnet, true) }}:
      - task: PowerShell@2
        displayName: 'Run Grype on .NET SBOM'
        name: GrypeDotnet
        inputs:
          targetType: 'inline'
          script: |
            $sbomPath = "${{ parameters.sbomDir }}/sbom-dotnet-file.json"
            $vulnOutput = "${{ parameters.vulnFolder }}/vuln-dotnet.json"
            Write-Host "Running Grype on .NET SBOM: $sbomPath"
            & "${{ parameters.grypeInstallDir }}/grype.exe" sbom:$sbomPath --fail-on low -o ${{ parameters.analysisOutputFormat }}=$vulnOutput -o table
            $exitDotnet = $LASTEXITCODE
            Write-Host "Grype .NET Exit Code: $exitDotnet"
            Write-Host "##vso[task.setvariable variable=GrypeDotnetExitCode]$exitDotnet"
  
  # Publish the vulnerability report.
  - task: PublishPipelineArtifact@1
    displayName: 'Publish vulnerability report'
    inputs:
      targetPath: ${{ parameters.vulnFolder }}
      publishLocation: 'pipeline'
      # The vulnerability report artifact will be named by taking the SBOM artifact name and appending "-vuln-report".
      artifact: ${{ parameters.sbomArtifactName }}-vuln-report
  
  # Optionally, fail the pipeline if vulnerabilities are detected.
  - ${{ if eq(parameters.failOnVulnerabilities, true) }}:
      - task: PowerShell@2
        displayName: 'Fail pipeline if vulnerabilities found'
        inputs:
          targetType: 'inline'
          script: |
            if ("${{ parameters.analyzeNpm }}" -eq "true") {
              Write-Host "Grype NPM Exit Code: $(GrypeNpmExitCode)"
            }
            if ("${{ parameters.analyzeDotnet }}" -eq "true") {
              Write-Host "Grype .NET Exit Code: $(GrypeDotnetExitCode)"
            }
            if ((("$(GrypeNpmExitCode)" -ne "0") -and "${{ parameters.analyzeNpm }}" -eq "true") -or (("$(GrypeDotnetExitCode)" -ne "0") -and "${{ parameters.analyzeDotnet }}" -eq "true")) {
              Write-Error "Dependency vulnerabilities detected. Failing pipeline."
              exit 1
            }
