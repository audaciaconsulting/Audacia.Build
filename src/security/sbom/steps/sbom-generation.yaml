# sbom-generation.yaml
parameters:
  - name: sbomOutputDir
    type: string
    default: '$(Agent.TempDirectory)/sbom'        # Local folder to store the generated SBOM files.
  - name: dependencyLockArtifactDirectory
    type: string
    default: '$(Agent.TempDirectory)/lock-deps'   # Path containing the published package-lock.json and deps.json artifact.
  - name: outputFormat
    type: string
    default: 'cyclonedx-json'                     # SBOM output format (e.g., cyclonedx-json).
  - name: publishArtifact
    type: boolean
    default: true                                 # Whether to publish the generated SBOM as a pipeline artifact.
  - name: artifactName
    type: string
    default: 'sbom-files'                         # Artifact name for the generated SBOM files.
  - name: syftInstallDir
    type: string
    default: '$(Agent.TempDirectory)'             # Directory where Syft (the SBOM generator) will be installed.
  - name: syftConfigFile
    type: string
    default: ''                                   # Optional Syft configuration file path.

steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Dependency Lock artifact'
    inputs:
      buildType: 'current'
      artifact: 'lock-deps-files'
      path: ${{ parameters.dependencyLockArtifactDirectory }}

  - script: |
      echo "Installing Syft (SBOM Generator) into ${{ parameters.syftInstallDir }}"
      curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b "${{ parameters.syftInstallDir }}"
    displayName: 'Install Syft (SBOM Generator)'

  - task: PowerShell@2
    displayName: 'Generate SBOM for Dependency Lock Files'
    inputs:
      targetType: 'inline'
      script: |
        <#
          Preflight manual checks:
            - Windows agent with PowerShell is available.
            - Node.js, npm, and npx are on PATH.
            - Outbound HTTPS to registry.npmjs.org:443 is allowed.
            - Syft is installed and syft.exe is present for fallback.
        #>

        $dependencyLockDir = "${{ parameters.dependencyLockArtifactDirectory }}"
        if (-Not (Test-Path $dependencyLockDir)) {
          $dependencyLockDir = "$(Agent.TempDirectory)/lock-deps"
        }

        $sbomOutputDir = "${{ parameters.sbomOutputDir }}"
        if (-Not (Test-Path $sbomOutputDir)) {
          New-Item -ItemType Directory -Path $sbomOutputDir | Out-Null
        }

        Write-Host "Generating SBOM for files in artifact directory: $dependencyLockDir"

        Write-Host ("Agent OS: {0}" -f $env:AGENT_OS)
        Write-Host ("Agent OS Architecture: {0}" -f $env:AGENT_OSARCHITECTURE)
        Write-Host ("PowerShell: {0} {1} on {2}" -f $PSVersionTable.PSEdition, $PSVersionTable.PSVersion, [Environment]::OSVersion.VersionString)

        $haveNode = $false; $haveNpm = $false; $haveNpx = $false
        try { $nodeVersion = & node --version; $haveNode = $true; Write-Host "node --version: $nodeVersion" } catch { Write-Warning ("Node.js not found on PATH. Error: {0}" -f $_.Exception.Message) }
        try { $npmVersion  = & npm  --version; $haveNpm  = $true; Write-Host "npm  --version: $npmVersion" } catch { Write-Warning ("npm not found on PATH. Error: {0}" -f $_.Exception.Message) }
        try { $npxVersion  = & npx  --version; $haveNpx  = $true; Write-Host "npx  --version: $npxVersion" } catch { Write-Warning ("npx not found on PATH. Error: {0}" -f $_.Exception.Message) }

        $networkOk = $true
        try {
          Write-Host "Network check: attempting TCP connection to registry.npmjs.org:443 ..."
          $tnc = Test-NetConnection -ComputerName registry.npmjs.org -Port 443 -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
          if ($null -eq $tnc -or -not $tnc.TcpTestSucceeded) {
            $networkOk = $false
            Write-Warning "Unable to reach registry.npmjs.org:443. If behind a proxy, configure 'npm config set proxy' and 'npm config set https-proxy'."
          } else {
            Write-Host "Network check passed: registry.npmjs.org:443 is reachable."
          }
        } catch {
          $networkOk = $false
          Write-Warning ("Network check (Test-NetConnection) failed: {0}" -f $_.Exception.Message)
        }

        if ($haveNpm) {
          try {
            $npmProxy = (& npm config get proxy) 2>$null
            $npmHttpsProxy = (& npm config get https-proxy) 2>$null
            Write-Host ("npm proxy: {0}" -f ($npmProxy | Out-String).Trim())
            Write-Host ("npm https-proxy: {0}" -f ($npmHttpsProxy | Out-String).Trim())
          } catch {
            Write-Warning ("Unable to read npm proxy configuration: {0}" -f $_.Exception.Message)
          }
          if ($networkOk) {
            try {
              $resp = Invoke-WebRequest -Uri "https://registry.npmjs.org/-/ping" -Method GET -TimeoutSec 15 -UseBasicParsing -ErrorAction Stop
              Write-Host ("NPM registry ping status: {0}" -f $resp.StatusCode)
            } catch {
              Write-Warning ("NPM registry HTTP ping failed: {0}" -f $_.Exception.Message)
            }
          }
        }

        $syftPath = Join-Path -Path "${{ parameters.syftInstallDir }}" -ChildPath "syft.exe"
        $syftExists = Test-Path $syftPath
        if ($syftExists) {
          Write-Host ("Syft detected at: {0}" -f $syftPath)
        } else {
          Write-Warning ("Syft not found at expected path: {0}. If CycloneDX npm is unavailable, fallback will fail." -f $syftPath)
        }

        $requestedFormat = "${{ parameters.outputFormat }}"
        $cdxOutputFormat = "json"
        if ($requestedFormat -match "(?i)xml")       { $cdxOutputFormat = "xml" }
        elseif ($requestedFormat -match "(?i)json") { $cdxOutputFormat = "json" }
        else {
          Write-Warning ("Requested output format '{0}' not recognized by CycloneDX npm. Defaulting to 'json'." -f $requestedFormat)
        }
        Write-Host ("Output format mapping: requested='{0}' -> CycloneDX npm='{1}'" -f $requestedFormat, $cdxOutputFormat)

        $canUseCdx = $haveNode -and $haveNpm -and $haveNpx -and $networkOk

        # Generate npm SBOMs by discovering project folders recursively
        $npmProjects = Get-ChildItem -Path $dependencyLockDir -Recurse -Filter "package.json" -File |
          Where-Object {
            Test-Path (Join-Path $_.Directory.FullName "package-lock.json")
          }

        Write-Host ("Discovered {0} npm project(s)." -f $npmProjects.Count)

        foreach ($manifest in $npmProjects) {
          $projDir   = $manifest.Directory.FullName
          $lockPath  = Join-Path $projDir "package-lock.json"
          $projRel   = $projDir.Substring($dependencyLockDir.Length).TrimStart('\','/')
          if ([string]::IsNullOrWhiteSpace($projRel)) { $projRel = "root" }

          $safeRel   = ($projRel -replace '[:*?\"<>|]', '_')
          $projOutDir = Join-Path $sbomOutputDir ("npm\" + $safeRel)
          if (-not (Test-Path $projOutDir)) {
            New-Item -ItemType Directory -Path $projOutDir -Force | Out-Null
          }
          $outputFile = Join-Path $projOutDir "bom.json"

          Write-Host "Generating npm SBOM from: $projDir"
          if (-not $canUseCdx) {
            Write-Warning "CycloneDX npm preflight failed; will try Syft fallback."
            if (-not $syftExists) {
              Write-Error "Syft fallback unavailable. Skipping $projDir"
              continue
            }
            $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$lockPath")
            if ("${{ parameters.syftConfigFile }}") { $syftArgs += @("-c", "${{ parameters.syftConfigFile }}") }
            & $syftPath @syftArgs
            if (Test-Path $outputFile) { Write-Host "Created (Syft): $outputFile" }
            continue
          }

          Push-Location $projDir
          try {
            $cdxArgs = @("--package-lock-only", "--output-format", $cdxOutputFormat, "--output-file", $outputFile, $manifest.FullName)
            Write-Host ("Command: npx -y @cyclonedx/cyclonedx-npm {0}" -f ($cdxArgs -join ' '))
            & npx -y @cyclonedx/cyclonedx-npm @cdxArgs
            $cdxExit = $LASTEXITCODE
            Write-Host "cyclonedx-npm exit code: $cdxExit"
          } catch {
            $cdxExit = 1
            Write-Warning ("CycloneDX npm threw an exception: {0}" -f $_.Exception.Message)
          } finally {
            Pop-Location | Out-Null
          }

          if ($cdxExit -ne 0 -or -not (Test-Path $outputFile)) {
            Write-Warning "CycloneDX npm failed for $projDir; falling back to Syft."
            if ($syftExists) {
              $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$lockPath")
              if ("${{ parameters.syftConfigFile }}") { $syftArgs += @("-c", "${{ parameters.syftConfigFile }}") }
              & $syftPath @syftArgs
              if (Test-Path $outputFile) { Write-Host "Created (Syft): $outputFile" } else { Write-Warning "Syft also failed for $projDir" }
            } else {
              Write-Error "No Syft available. Skipped $projDir."
            }
          } else {
            Write-Host "Created: $outputFile"
          }
        }

        # Generate SBOMs for .NET deps files via Syft (unchanged)
        $depsFiles = Get-ChildItem -Path $dependencyLockDir -Recurse -Filter "*.deps.json" -File
        $depsNames = ($depsFiles | ForEach-Object { $_.Name } | Sort-Object)
        Write-Host ("Discovered {0} .deps.json file(s): {1}" -f $depsFiles.Count, ($depsNames -join ", "))

        foreach ($file in $depsFiles) {
          $nameWithoutDeps = $file.BaseName -replace '\.deps$', ''
          $outputFile = Join-Path -Path $sbomOutputDir -ChildPath ("$nameWithoutDeps-sbom.json")
          Write-Host "Detected .NET deps file: $($file.FullName)"
          if (-not $syftExists) {
            Write-Error ("Syft not found at: {0}. Cannot generate SBOM for {1}." -f $syftPath, $file.Name)
            continue
          }
          $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$($file.FullName)")
          if ("${{ parameters.syftConfigFile }}") { $syftArgs += @("-c", "${{ parameters.syftConfigFile }}") }
          Write-Host ("Command: {0} {1}" -f $syftPath, ($syftArgs -join ' '))
          & $syftPath @syftArgs
          if (Test-Path $outputFile) { Write-Host "Created: $outputFile" } else { Write-Warning "Failed to create: $outputFile" }
        }

  - ${{ if eq(parameters.publishArtifact, true) }}:
      - task: PublishPipelineArtifact@1
        displayName: 'Publish SBOM Artifact'
        inputs:
          targetPath: ${{ parameters.sbomOutputDir }}
          publishLocation: 'pipeline'
          artifact: ${{ parameters.artifactName }}
