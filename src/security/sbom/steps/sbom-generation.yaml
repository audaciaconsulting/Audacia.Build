# sbom-generation.yaml
parameters:
  - name: sbomOutputDir
    type: string
    default: '$(Agent.TempDirectory)/sbom'        # Local folder to store the generated SBOM files.
  - name: dependencyLockArtifactDirectory
    type: string
    default: '$(Agent.TempDirectory)/lock-deps'   # Path containing the published package-lock.json and deps.json artifact.
  - name: outputFormat
    type: string
    default: 'cyclonedx-json'                     # SBOM output format (e.g., cyclonedx-json).
  - name: publishArtifact
    type: boolean
    default: true                                 # Whether to publish the generated SBOM as a pipeline artifact.
  - name: artifactName
    type: string
    default: 'sbom-files'                         # Artifact name for the generated SBOM files.
  - name: syftInstallDir
    type: string
    default: '$(Agent.TempDirectory)'             # Directory where Syft (the SBOM generator) will be installed.
  - name: syftConfigFile
    type: string
    default: ''                                   # Directory where an optional configuration file for Syft located.

steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Dependency Lock artifact'
    inputs:
      buildType: 'current'
      artifact: 'lock-deps-files'                  # Updated artifact name to match published artifact.
      path: ${{ parameters.dependencyLockArtifactDirectory }}

  # Install Syft before generating SBOMs.
  - script: |
      echo "Installing Syft (SBOM Generator) into ${{ parameters.syftInstallDir }}"
      curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b "${{ parameters.syftInstallDir }}"
    displayName: 'Install Syft (SBOM Generator)'

  # Generate SBOM for .deps.json files
  - task: PowerShell@2
    displayName: 'Generate SBOM for Dependency Lock Files'
    inputs:
      targetType: 'inline'
      script: |
        $dependencyLockDir = "${{ parameters.dependencyLockArtifactDirectory }}"
        if (-Not (Test-Path $dependencyLockDir)) {
          $dependencyLockDir = "$(Agent.TempDirectory)/lock-deps"
        }
        $sbomOutputDir = "${{ parameters.sbomOutputDir }}"
        if (-Not (Test-Path $sbomOutputDir)) {
            New-Item -ItemType Directory -Path $sbomOutputDir | Out-Null
        }
        $depsFiles = Get-ChildItem -Path $dependencyLockDir -Recurse -Filter "*.deps.json"
        foreach ($file in $depsFiles) {
            $nameWithoutDeps = $file.BaseName -replace '\.deps$', ''
            $outputFile = Join-Path -Path $sbomOutputDir -ChildPath ("$nameWithoutDeps-sbom.json")
            Write-Host "Generating SBOM for $($file.FullName) -> $outputFile"
            $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$($file.FullName)")
            if ("${{ parameters.syftConfigFile }}") {
                $syftArgs += @("-c", "${{ parameters.syftConfigFile }}")
            }
            & "${{ parameters.syftInstallDir }}\syft.exe" @syftArgs
        }

  # Generate SBOM for package-lock.json files
  - task: PowerShell@2
    displayName: 'Generate SBOM for package-lock.json files'
    inputs:
      targetType: 'inline'
      script: |
        $dependencyLockDir = "${{ parameters.dependencyLockArtifactDirectory }}"
        if (-Not (Test-Path $dependencyLockDir)) {
          $dependencyLockDir = "$(Agent.TempDirectory)/lock-deps"
        }
        $sbomOutputDir = "${{ parameters.sbomOutputDir }}"
        if (-Not (Test-Path $sbomOutputDir)) {
            New-Item -ItemType Directory -Path $sbomOutputDir | Out-Null
        }
        $lockFiles = Get-ChildItem -Path $dependencyLockDir -Recurse -Filter "package-lock.json"
        foreach ($file in $lockFiles) {
            $uiName = Split-Path $file.Directory.Name -Leaf
            $outputFile = Join-Path -Path $sbomOutputDir -ChildPath ("$uiName-npm-sbom.json")
            Write-Host "Generating SBOM for $($file.FullName) -> $outputFile"
            $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$($file.FullName)")
            if ("${{ parameters.syftConfigFile }}") {
                $syftArgs += @("-c", "${{ parameters.syftConfigFile }}")
            }
            & "${{ parameters.syftInstallDir }}\syft.exe" @syftArgs
        }

  # Publish the generated SBOM files as an artifact if enabled.
  - ${{ if eq(parameters.publishArtifact, true) }}:
      - task: PublishPipelineArtifact@1
        displayName: 'Publish SBOM Artifact'
        inputs:
          targetPath: ${{ parameters.sbomOutputDir }}
          publishLocation: 'pipeline'
          artifact: ${{ parameters.artifactName }}
