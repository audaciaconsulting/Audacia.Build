parameters:
  - name: sbomOutputDir
    type: string
    default: '$(Agent.TempDirectory)/sbom'        # Local folder to store the generated SBOM files.
  - name: dependencyLockArtifactDirectory
    type: string
    default: '$(Agent.TempDirectory)/lock-deps'   # Path containing the published package-lock.json and deps.json artifact.
  - name: outputFormat
    type: string
    default: 'cyclonedx-json'                     # SBOM output format (e.g., cyclonedx-json).
  - name: publishArtifact
    type: boolean
    default: true                                 # Whether to publish the generated SBOM as a pipeline artifact.
  - name: artifactName
    type: string
    default: 'sbom-files'                         # Artifact name for the generated SBOM files.
  - name: syftInstallDir
    type: string
    default: '$(Agent.TempDirectory)'             # Directory where Syft (the SBOM generator) will be installed.
  - name: syftConfigFile
    type: string
    default: ''                                   # Optional Syft configuration file path.

steps:
  # Install Syft for fallback and for .NET deps processing.
  - script: |
      echo "Installing Syft into ${{ parameters.syftInstallDir }}"
      curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b "${{ parameters.syftInstallDir }}"
    displayName: Install Syft

  # Download the dependency-manifests artifact produced by the build job.
  - task: DownloadPipelineArtifact@2
    displayName: Download dependency-manifests artifact
    inputs:
      buildType: current
      artifact: lock-deps-files
      path: ${{ parameters.dependencyLockArtifactDirectory }}

  # Generate SBOMs for npm and .NET inputs with minimal, action-oriented logging.
  - task: PowerShell@2
    displayName: Generate SBOMs (npm + .NET)
    inputs:
      targetType: inline
      script: |
        $dependencyLockDir = "${{ parameters.dependencyLockArtifactDirectory }}"
        if (-Not (Test-Path $dependencyLockDir)) {
          $dependencyLockDir = "$(Agent.TempDirectory)/lock-deps"
        }

        $sbomOutputDir = "${{ parameters.sbomOutputDir }}"
        if (-Not (Test-Path $sbomOutputDir)) {
          New-Item -ItemType Directory -Path $sbomOutputDir | Out-Null
        }

        $syftPath   = Join-Path "${{ parameters.syftInstallDir }}" "syft.exe"
        $syftExists = Test-Path $syftPath

        $requestedFormat = "${{ parameters.outputFormat }}"
        $cdxOutputFormat = if ($requestedFormat -match '(?i)xml') { 'xml' } else { 'json' }

        # Detect if CycloneDX npm is invokable; fallback to Syft otherwise.
        $haveNode = $false; $haveNpm = $false; $haveNpx = $false
        try { & node --version  | Out-Null; $haveNode = $true } catch { }
        try { & npm  --version  | Out-Null; $haveNpm  = $true } catch { }
        try { & npx  --version  | Out-Null; $haveNpx  = $true } catch { }
        $canUseCdx = ($haveNode -and $haveNpm -and $haveNpx)

        $npmProjects = Get-ChildItem -Path $dependencyLockDir -Recurse -Filter "package.json" -File |
          Where-Object { Test-Path (Join-Path $_.Directory.FullName "package-lock.json") }

        $npmSuccess = 0; $npmFallback = 0; $npmFailed = 0
        Write-Host "npm projects discovered: $($npmProjects.Count)"

        foreach ($manifest in $npmProjects) {
          $projDir   = $manifest.Directory.FullName
          $lockPath  = Join-Path $projDir "package-lock.json"
          $projRel   = $projDir.Substring($dependencyLockDir.Length).TrimStart('\','/')
          if ([string]::IsNullOrWhiteSpace($projRel)) { $projRel = "root" }
          $safeRel   = ($projRel -replace '[:*?\"<>|]', '_')

          $projOutDir = Join-Path $sbomOutputDir ("npm\" + $safeRel)
          if (-not (Test-Path $projOutDir)) { New-Item -ItemType Directory -Path $projOutDir -Force | Out-Null }
          $outputFile = Join-Path $projOutDir "bom.json"

          if ($canUseCdx) {
            Push-Location $projDir
            try {
              & npx -y @cyclonedx/cyclonedx-npm --package-lock-only --output-format $cdxOutputFormat --output-file $outputFile $manifest.FullName
              $exit = $LASTEXITCODE
            } catch { $exit = 1 } finally { Pop-Location | Out-Null }
            if ($exit -eq 0 -and (Test-Path $outputFile)) { $npmSuccess++; continue }
            Write-Host "CycloneDX npm failed for: $projDir"
          }

          if ($syftExists) {
            $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$lockPath")
            if ("${{ parameters.syftConfigFile }}") { $syftArgs += @("-c", "${{ parameters.syftConfigFile }}") }
            & $syftPath @syftArgs
            if (Test-Path $outputFile) { $npmFallback++ } else { $npmFailed++ }
          } else {
            $npmFailed++
          }
        }

        $depsFiles = Get-ChildItem -Path $dependencyLockDir -Recurse -Filter "*.deps.json" -File
        $dotnetSuccess = 0; $dotnetFailed = 0
        Write-Host ".NET deps files discovered: $($depsFiles.Count)"

        foreach ($file in $depsFiles) {
          if (-not $syftExists) { $dotnetFailed++; continue }
          $nameWithoutDeps = $file.BaseName -replace '\.deps$', ''
          $outputFile = Join-Path -Path $sbomOutputDir -ChildPath ("$nameWithoutDeps-sbom.json")
          $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$($file.FullName)")
          if ("${{ parameters.syftConfigFile }}") { $syftArgs += @("-c", "${{ parameters.syftConfigFile }}") }
          & $syftPath @syftArgs
          if (Test-Path $outputFile) { $dotnetSuccess++ } else { $dotnetFailed++ }
        }

        Write-Host "SBOM generation summary:"
        Write-Host "  npm: success=$npmSuccess, fallback_syft=$npmFallback, failed=$npmFailed"
        Write-Host "  .NET: success=$dotnetSuccess, failed=$dotnetFailed"

  - ${{ if eq(parameters.publishArtifact, true) }}:
      - task: PublishPipelineArtifact@1
        displayName: Publish SBOM artifact
        inputs:
          targetPath: ${{ parameters.sbomOutputDir }}
          publishLocation: pipeline
          artifact: ${{ parameters.artifactName }}
