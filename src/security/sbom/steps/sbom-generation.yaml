# sbom-generation.yaml
parameters:
  - name: sbomOutputDir
    type: string
    default: '$(Agent.TempDirectory)/sbom'        # Local folder to store the generated SBOM files.
  - name: dependencyLockArtifactDirectory
    type: string
    default: '$(Agent.TempDirectory)/lock-deps'   # Path containing the published package-lock.json and deps.json artifact.
  - name: outputFormat
    type: string
    default: 'cyclonedx-json'                     # SBOM output format (e.g., cyclonedx-json).
  - name: publishArtifact
    type: boolean
    default: true                                 # Whether to publish the generated SBOM as a pipeline artifact.
  - name: artifactName
    type: string
    default: 'sbom-files'                         # Artifact name for the generated SBOM files.
  - name: syftInstallDir
    type: string
    default: '$(Agent.TempDirectory)'             # Directory where Syft (the SBOM generator) will be installed.
  - name: syftConfigFile
    type: string
    default: ''                                   # Directory where an optional configuration file for Syft located.

steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Dependency Lock artifact'
    inputs:
      buildType: 'current'
      artifact: 'lock-deps-files'                  # Updated artifact name to match published artifact.
      path: ${{ parameters.dependencyLockArtifactDirectory }}

  # Install Syft before generating SBOMs.
  - script: |
      echo "Installing Syft (SBOM Generator) into ${{ parameters.syftInstallDir }}"
      curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b "${{ parameters.syftInstallDir }}"
    displayName: 'Install Syft (SBOM Generator)'

  - task: PowerShell@2
    displayName: 'Generate SBOM for Dependency Lock Files'
    inputs:
      targetType: 'inline'
      script: |
        # Log the current GitHub branch information
        $branchName = $env:BUILD_SOURCEBRANCHNAME
        $branchRef = $env:BUILD_SOURCEBRANCH
        $prSource = $env:SYSTEM_PULLREQUEST_SOURCEBRANCH
        $prTarget = $env:SYSTEM_PULLREQUEST_TARGETBRANCH
        if (![string]::IsNullOrWhiteSpace($prSource)) {
          Write-Host "Building PR from $prSource into $prTarget"
        }
        else {
          Write-Host "Building branch: $branchName ($branchRef)"
        }

        $dependencyLockDir = "${{ parameters.dependencyLockArtifactDirectory }}"
        if (-Not (Test-Path $dependencyLockDir)) {
          # If the parameter isnâ€™t set, assume the default download path.
          $dependencyLockDir = "$(Agent.TempDirectory)/lock-deps"
        }
        Write-Host "Generating SBOM for files in artifact directory: $dependencyLockDir"
        $sbomOutputDir = "${{ parameters.sbomOutputDir }}"
        if (-Not (Test-Path $sbomOutputDir)) {
            New-Item -ItemType Directory -Path $sbomOutputDir | Out-Null
        }
        # Find every .json file in the directory and generate an SBOM for it in order to build a complete dependency picture for the project.
        $files = Get-ChildItem -Path $dependencyLockDir -Filter "*.json"
        Write-Host ("Discovered {0} JSON file(s) in dependency lock directory: {1}" -f $files.Count, ($files | ForEach-Object { $_.Name } | Sort-Object | Join-String -Separator ", "))
        # Log toolchain information for traceability and troubleshooting
        try { $nodeVersion = & node --version; Write-Host "node --version: $nodeVersion" } catch { Write-Warning ("Node.js not found on PATH. Error: {0}" -f $_.Exception.Message) }
        try { $npmVersion  = & npm  --version; Write-Host "npm  --version: $npmVersion" } catch { Write-Warning ("npm not found on PATH. Error: {0}" -f $_.Exception.Message) }
        try { $npxVersion  = & npx  --version; Write-Host "npx  --version: $npxVersion" } catch { Write-Warning ("npx not found on PATH. Error: {0}" -f $_.Exception.Message) }

        # Map requested output format to CycloneDX npm accepted formats (json|xml)
        $requestedFormat = "${{ parameters.outputFormat }}"
        $cdxOutputFormat = "json"
        if ($requestedFormat -match "(?i)xml") { $cdxOutputFormat = "xml" }
        elseif ($requestedFormat -match "(?i)json") { $cdxOutputFormat = "json" }

        foreach ($file in $files) {
            if ($file.Name -eq "package-lock.json") {
                $outputFile = Join-Path -Path $sbomOutputDir -ChildPath "npm-sbom.json"
                Write-Host "Detected npm lockfile: $($file.FullName)"
                Write-Host "Using CycloneDX npm tool to generate SBOM: $outputFile"
                $toolName = "@cyclonedx/cyclonedx-npm"
                $cdxArgs = @("--output-format", $cdxOutputFormat, "--output-file", $outputFile, "--lockfile", "$($file.FullName)")
                Write-Host ("Command: npx -y {0} {1}" -f $toolName, ($cdxArgs -join ' '))
                $cdxExit = $null
                try {
                    & npx -y $toolName @cdxArgs
                    $cdxExit = $LASTEXITCODE
                    Write-Host "CycloneDX npm exit code: $cdxExit"
                }
                catch {
                    $cdxExit = 1
                    Write-Warning ("CycloneDX npm threw an exception: {0}" -f $_.Exception.Message)
                }
                if ($cdxExit -ne 0 -or -not (Test-Path $outputFile)) {
                    Write-Warning "CycloneDX npm failed or did not produce output. Falling back to Syft for $($file.Name)."
                    $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$($file.FullName)")
                    if ("${{ parameters.syftConfigFile }}") {
                        $syftArgs += @("-c", "${{ parameters.syftConfigFile }}")
                    }
                    Write-Host ("Command: {0}\syft.exe {1}" -f "${{ parameters.syftInstallDir }}", ($syftArgs -join ' '))
                    & "${{ parameters.syftInstallDir }}\syft.exe" @syftArgs
                }
                else {
                    Write-Host "CycloneDX npm successfully generated SBOM: $outputFile"
                }
            }
            elseif ($file.Name -like "*.deps.json") {
                # Remove the '.deps' segment and append -sbom.json.
                $nameWithoutDeps = $file.BaseName -replace '\.deps$', ''
                $outputFile = Join-Path -Path $sbomOutputDir -ChildPath ("$nameWithoutDeps-sbom.json")
                Write-Host "Detected .NET deps file: $($file.FullName)"
                Write-Host "Using Syft to generate SBOM: $outputFile"
                $syftArgs = @("-o", "${{ parameters.outputFormat }}=$outputFile", "$($file.FullName)")
                if ("${{ parameters.syftConfigFile }}") {
                    $syftArgs += @("-c", "${{ parameters.syftConfigFile }}")
                }
                Write-Host ("Command: {0}\syft.exe {1}" -f "${{ parameters.syftInstallDir }}", ($syftArgs -join ' '))
                & "${{ parameters.syftInstallDir }}\syft.exe" @syftArgs
            }
            else {
                Write-Host "Skipping unsupported JSON file: $($file.Name)"
                continue
            }
        }

  # Publish the generated SBOM files as an artifact if enabled.
  - ${{ if eq(parameters.publishArtifact, true) }}:
      - task: PublishPipelineArtifact@1
        displayName: 'Publish SBOM Artifact'
        inputs:
          targetPath: ${{ parameters.sbomOutputDir }}
          publishLocation: 'pipeline'
          artifact: ${{ parameters.artifactName }}
