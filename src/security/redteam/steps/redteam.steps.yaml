parameters:
  # Working directory for the step. Defaults to the root of the repo.
  - name: workingDirectory
    type: string
    default: ''

  # Array of paths in the calling repo to your red team config file(s) (e.g. `llm_eval/ai_red_teaming/redteam.yaml`).
  # Type set to object so Azure DevOps will accept multiple configs
  - name: config
    type: object

  # The API url for the target LLM (e.g. https://ai-app.audacia.systems/api).
  - name: apiUrl
    type: string

  # The url for authenticating with Entra Id in order to test the LLM (e.g. https://login.microsoftonline.com/{{TenantId}}/oauth2/v2.0/token). TenantId can be found in the App Registration in Azure.
  - name: authTokenUrl
    type: string

  # The Entra Id Client Id for the App Registration, in order to be authenticated to test the LLM. Client Id can be found in the App Registration in Azure.
  - name: authClientId
    type: string

  # The Entra Id Client Secret for the App Registration, in order to be authenticated to test the LLM. Client Secret can be created in the App Registration in Azure, and should be stored in Keeper.
  - name: authClientSecret
    type: string

  # The Entra Id Client Scope for the App Registration, in order to be authenticated to test the LLM (e.g. api://{{ClientId}}/.default).
  - name: authClientScope
    type: string

  - name: resultsDirectory
    type: string
    default: 'results'

  # Model of LLM for test, usually stored as an enum in the app. Defaults to '100'.
  - name: chosenModel
    type: string

steps:
  - checkout: self
    clean: true

  # Node for Promptfoo
  - task: NodeTool@0
    displayName: 'Install Node.js 20'
    inputs:
      versionSpec: '20.x'

  - task: Npm@1
    displayName: 'NPM Install'
    inputs:
      workingDir: ${{ parameters.workingDirectory }}
      command: 'ci'

  - task: Bash@3
    displayName: 'Verify promptfoo installation'
    inputs:
      targetType: 'inline'
      script: |
        npx promptfoo --version

  # Python for target script resolution
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.12'
    inputs:
      versionSpec: '3.12'
      addToPath: true

  - task: Bash@3
    displayName: 'Install uv tool'
    inputs:
      workingDirectory: ${{ parameters.workingDirectory }}
      targetType: 'inline'
      script: |
        curl -LsSf https://astral.sh/uv/install.sh | sh

  - task: Bash@3
    displayName: 'Install python dependencies'
    inputs:
      workingDirectory: ${{ parameters.workingDirectory }}
      targetType: 'inline'
      script: uv sync

  - task: Bash@3
    displayName: 'Activate python environment'
    inputs:
      workingDirectory: ${{ parameters.workingDirectory }}
      targetType: 'inline'
      script: |
        source .venv/bin/activate

  - task: Bash@3
    displayName: 'Create results directory'
    inputs:
      workingDirectory: ${{parameters.workingDirectory}}
      targetType: 'inline'
      script: |
        mkdir -p "${{parameters.workingDirectory}}/${{parameters.resultsDirectory}}"

  - ${{ each cfg in parameters.config }}:
    - task: Bash@3
      displayName: 'Execute red team evaluation: ${{ cfg }}'
      inputs:
        workingDirectory: ${{ parameters.workingDirectory }}
        targetType: 'inline'
        script: |
          CONFIG_PATH='${{ cfg }}'
          CONFIG_FILE="$(basename "$CONFIG_PATH")"
          CONFIG_NAME="${CONFIG_FILE%.*}"
          python -m llm_eval.red_teaming.promptfoo_evaluate "$CONFIG_PATH" --output "${{ parameters.workingDirectory }}/${{ parameters.resultsDirectory }}/$CONFIG_NAME"
      env:
        PYTHONPATH: $(System.DefaultWorkingDirectory)
        API_URL: ${{ parameters.apiUrl }}
        AUTH_TOKEN_URL: ${{ parameters.authTokenUrl }}
        AUTH_CLIENT_ID: ${{ parameters.authClientId }}
        AUTH_CLIENT_SECRET: ${{ parameters.authClientSecret }}
        AUTH_CLIENT_SCOPE: ${{ parameters.authClientScope }}
        CHOSEN_MODEL: ${{ parameters.chosenModel }}

  # Publish JSON/HTML artifacts
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Red Team Results'
    inputs:
      pathToPublish: '$(System.DefaultWorkingDirectory)/${{ parameters.workingDirectory }}/${{ parameters.resultsDirectory }}'
      artifactName: 'promptfoo-redteam-results'
    condition: succeededOrFailed()