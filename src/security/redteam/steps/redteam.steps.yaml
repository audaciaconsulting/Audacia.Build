parameters:
  # Path in the calling repo to your red team config (e.g., `llm_eval/ai_red_teaming/redteam.yaml`).
  - name: configPath
    type: string
    default: ''

  # Path to where your `package-lock.json` lives (e.g., `llm_eval`), npm commands run there.
  - name: npmWorkingDirectory
    type: string
    default: ''

  # Exported as `API_URL` for your Python target.
  - name: apiUrl
    type: string
    default: ''

  # Exported as `AUTH_TOKEN_URL`.
  - name: authTokenUrl
    type: string
    default: ''

  # Exported as `AUTH_CLIENT_ID`.
  - name: authClientId
    type: string
    default: ''

  # Exported as `AUTH_CLIENT_SECRET`. Mark secret in your variable group.
  - name: authClientSecret
    type: string
    default: ''

  # Exported as `AUTH_CLIENT_SCOPE`.
  - name: authClientScope
    type: string
    default: ''

  # Exported as `CHOSEN_MODEL`. Use whatever LLM selector your app expects.
  - name: chosenModel
    type: string
    default: ''

steps:
  - checkout: self
    clean: true

  # Node for Promptfoo
  - task: NodeTool@0
    displayName: 'Install Node.js 20'
    inputs:
      versionSpec: '20.x'

  # npm install
  - script: |
      set -euo pipefail
      npm ci
      npm install -g promptfoo
      promptfoo --version
    workingDirectory: ${{ parameters.npmWorkingDirectory }}
    displayName: 'Install dependencies and Promptfoo'

  # Python for target script resolution
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.12'
    inputs:
      versionSpec: '3.12'
      addToPath: true

  - script: |
      set -euo pipefail
      python --version
      python -m pip install --upgrade pip
      python -m pip install oauthlib pydantic python-dotenv requests requests-oauthlib
    displayName: 'Install Python dependencies'

  # Run Promptfoo Red Team
  - script: |
      set -euo pipefail
      RESULTS_DIR="$(System.DefaultWorkingDirectory)/results"
      mkdir -p "$RESULTS_DIR"

      CONFIG_PATH="${{ parameters.configPath }}"
      CONFIG_DIR="$(dirname "$CONFIG_PATH")"
      CONFIG_FILE="$(basename "$CONFIG_PATH")"

      echo "Running Promptfoo red team:"
      echo "  Config dir:  $CONFIG_DIR"
      echo "  Config file: $CONFIG_FILE"
      echo "  Results dir: $RESULTS_DIR"

      pushd "$CONFIG_DIR" >/dev/null

      npx promptfoo redteam eval \
        --config "$CONFIG_FILE" \
        --output "$RESULTS_DIR/results.json" \
        --output "$RESULTS_DIR/report.html"

      popd >/dev/null
    displayName: 'Run Promptfoo Red Team'
    env:
      PYTHONPATH: $(System.DefaultWorkingDirectory)
      API_URL: ${{ parameters.apiUrl }}
      AUTH_TOKEN_URL: ${{ parameters.authTokenUrl }}
      AUTH_CLIENT_ID: ${{ parameters.authClientId }}
      AUTH_CLIENT_SECRET: ${{ parameters.authClientSecret }}
      AUTH_CLIENT_SCOPE: ${{ parameters.authClientScope }}
      CHOSEN_MODEL: ${{ parameters.chosenModel }}

  # Publish JSON/HTML artifacts
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Red Team Results'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/results'
      artifactName: 'promptfoo-redteam-results'
    condition: succeededOrFailed()
