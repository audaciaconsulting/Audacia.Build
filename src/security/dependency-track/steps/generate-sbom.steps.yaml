# Template: generate SBOMs (npm + .NET), publish artifact if requested.
# Outputs:
#   - Sets pipeline variable `sbomExists` = true/false
#   - Publishes artifact if publishArtifact=true

parameters:
  # Accept ANY number of .NET project paths (one per line).
  # Recommendation: list all deployables (API, Blazor UI, Functions, etc.)
  - name: dotnetProjectsMultiline
    type: string
    default: ''

  # Accept ANY number of npm roots (optional; auto-discovery falls back to package-lock.json / package.json).
  # Recommendation: set explicitly for monorepos to avoid scanning unrelated directories.
  - name: npmRootsMultiline
    type: string
    default: ''

  # Whether to publish the generated SBOMs as a pipeline artifact.
  # Recommendation: true for multi-stage/mainline (traceability, reuse); false only for ephemeral/PR runs.
  - name: publishArtifact
    type: boolean
    default: true

  # Name of the published artifact when publishArtifact=true.
  - name: artifactName
    type: string
    default: 'sbom-files'

  # Node version used for npm generation (cyclonedx-npm).
  # Recommendation: pin to an LTS (e.g., 20.x) for reproducibility.
  - name: nodeVersion
    type: string
    default: '20.x'

  # When true, attempt to embed license texts into the SBOM (mainly via cyclonedx-npm).
  # Pros: richer compliance evidence (components[].licenses[].license.text).
  # Cons: larger SBOM size & slightly longer generation.
  # Recommendation: true for mainline/compliance; false for fast PR validation if runtime/size is a concern.
  - name: includeLicenseTexts
    type: boolean
    default: true

  # When true, validates that ALL expected SBOMs were generated (based on declared projects).
  # If any expected SBOM is missing, the job fails and `sbomExists` is set to false.
  # Recommendation: keep true in mainline pipelines to catch missing builds early.
  - name: requireAllExpectedSboms
    type: boolean
    default: true

steps:
  # 1) Checkout and setup caching
  - template: /src/security/dependency-track/steps/generate/checkout-and-cache.step.yaml@templates

  # 2) Log environment and parameters
  - powershell: |
      Write-Host "##[group]Environment & Parameters"
      Write-Host "Agent.OS: $env:AGENT_OS"
      Write-Host "Output format: JSON (forced)"
      Write-Host "Include license texts: ${{ parameters.includeLicenseTexts }}"
      Write-Host "Require all expected SBOMs: ${{ parameters.requireAllExpectedSboms }}"
      Write-Host "SBOM output dir: $(Agent.TempDirectory)/sbom"
      Write-Host "Sources: $(System.DefaultWorkingDirectory)"
      Write-Host "##[endgroup]"
    displayName: "Log environment and parameters"

  # 3) Discover npm manifests for debugging
  - template: /src/security/dependency-track/steps/generate/discover-npm-manifests.step.yaml@templates

  # 4) Setup Node.js tooling
  - template: /src/security/dependency-track/steps/generate/setup-node.step.yaml@templates
    parameters:
      nodeVersion: ${{ parameters.nodeVersion }}

  # 5) Setup CycloneDX .NET tool
  - template: /src/security/dependency-track/steps/generate/setup-cyclonedx-dotnet.step.yaml@templates

  # 6) Resolve npm roots from parameter or auto-discovery
  - template: /src/security/dependency-track/steps/generate/resolve-npm-roots.step.yaml@templates
    parameters:
      npmRootsMultiline: ${{ parameters.npmRootsMultiline }}

  # 7) Resolve .NET projects from multiline parameter
  - template: /src/security/dependency-track/steps/generate/resolve-dotnet-projects.step.yaml@templates
    parameters:
      dotnetProjectsMultiline: ${{ parameters.dotnetProjectsMultiline }}

  # 8) Generate npm SBOMs
  - template: /src/security/dependency-track/steps/generate/generate-npm-sboms.step.yaml@templates
    parameters:
      includeLicenseTexts: ${{ parameters.includeLicenseTexts }}

  # 9) Generate .NET SBOMs
  - template: /src/security/dependency-track/steps/generate/generate-dotnet-sboms.step.yaml@templates
    parameters:
      dotnetProjectsMultiline: ${{ parameters.dotnetProjectsMultiline }}

  # 10) Detect SBOM folder and set sbomExists variable
  - template: /src/security/dependency-track/steps/generate/detect-sbom-folder.step.yaml@templates

  # 11) Validate that all expected SBOMs were generated (fail fast if not)
  - template: /src/security/dependency-track/steps/generate/validate-expected-sboms.step.yaml@templates
    parameters:
      strict: ${{ parameters.requireAllExpectedSboms }}
    # This step will set sbomExists=false if any expected SBOMs are missing

  # 12) Publish SBOM artifact (conditional and fallback)
  - template: /src/security/dependency-track/steps/generate/publish-sbom-artifact.step.yaml@templates
    parameters:
      publishArtifact: ${{ parameters.publishArtifact }}
      artifactName: ${{ parameters.artifactName }}
