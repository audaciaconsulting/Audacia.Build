# Template: generate npm SBOMs using cyclonedx-npm
# Sets up Node, resolves roots (param or auto), generates JSON SBOMs to $(Agent.TempDirectory)/sbom/npm
# Can optionally publish the combined $(Agent.TempDirectory)/sbom as an artifact.

parameters:
  - name: npmRootsMultiline
    type: string
    default: ''
  - name: nodeVersion
    type: string
    default: '20.x'
  - name: includeLicenseTexts
    type: boolean
    default: 'true'
  - name: publishArtifact
    type: boolean
    default: 'false'
  - name: artifactName
    type: string
    default: 'sbom-files'

steps:
  - task: UseNode@1
    displayName: Use Node.js ${{ parameters.nodeVersion }}
    inputs:
      versionSpec: ${{ parameters.nodeVersion }}
      checkLatest: false

  - task: PowerShell@2
    displayName: "Setup Node.js tooling and expose paths"
    inputs:
      pwsh: true
      targetType: inline
      script: |
        $ErrorActionPreference = 'Stop'
        function Get-NodeToolPaths {
          param([string]$major)
          $root = Join-Path $env:AGENT_TOOLSDIRECTORY 'node'
          if (-not (Test-Path $root)) { throw "Node tools directory not found: $root" }
          $ver = Get-ChildItem $root -Directory -Name | Where-Object { $_ -like "$major.*" } | Sort-Object { [version]$_ } -Descending | Select-Object -First 1
          if (-not $ver) { throw "No Node $major.* found under $root" }
          $bin = Join-Path (Join-Path $root $ver) 'x64'
          $node = Join-Path $bin 'node.exe'
          $npm  = Join-Path $bin 'npm.cmd'
          $npx  = Join-Path $bin 'npx.cmd'
          if (-not (Test-Path $node)) { throw "node.exe not found at $node" }
          if (-not (Test-Path $npm))  { throw "npm.cmd not found at $npm" }
          if (-not (Test-Path $npx))  { throw "npx.cmd not found at $npx" }
          [pscustomobject]@{ Node=$node; Npm=$npm; Npx=$npx; Bin=$bin; Version=$ver }
        }

        $spec='${{ parameters.nodeVersion }}'
        $major = [regex]::Match($spec, '^\d+').Value
        if (-not $major) { throw "Could not derive Node major version from spec: '$spec'." }
        $tool = Get-NodeToolPaths -major $major

        Write-Host "##[group]Node tooling (resolved)"
        & $tool.Node --version
        & $tool.Npm  --version
        & $tool.Npx  --version
        Write-Host "Resolved bin: $($tool.Bin)"
        Write-Host "##[endgroup]"

        Write-Host "##vso[task.prependpath]$($tool.Bin)"
        $env:PATH = "$($tool.Bin);$env:PATH"
        Write-Host "##vso[task.setvariable variable=SBOM_NODE_BIN]$($tool.Bin)"
        Write-Host "##vso[task.setvariable variable=SBOM_NODE]$($tool.Node)"
        Write-Host "##vso[task.setvariable variable=SBOM_NPM]$($tool.Npm)"
        Write-Host "##vso[task.setvariable variable=SBOM_NPX]$($tool.Npx)"

  - task: PowerShell@2
    name: resolveNpmRoots
    displayName: "Resolve npm project roots"
    inputs:
      pwsh: true
      targetType: inline
      script: |
        $ErrorActionPreference = 'Stop'

        # Raw multiline from template parameter (here-string terminators must start at column 1)
        $rootsParam = @'
          ${{ parameters.npmRootsMultiline }}
        '@

        $rootsParam = $rootsParam -split "`r?`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -and -not $_.StartsWith('#') }

        $workspace = '$(System.DefaultWorkingDirectory)'
        Write-Host "##[group]Discover JS manifests"
        $locks = Get-ChildItem -Path $workspace -Recurse -Filter 'package-lock.json' -File -EA SilentlyContinue
        $pkgs  = Get-ChildItem -Path $workspace -Recurse -Filter 'package.json'      -File -EA SilentlyContinue
        Write-Host "Found package-lock.json: $($locks.Count)"
        Write-Host "Found package.json:      $($pkgs.Count)"
        Write-Host "##[endgroup]"
        
        $projects = New-Object System.Collections.ArrayList
        if ($rootsParam.Count -gt 0) {
          foreach ($r in $rootsParam) {
            if (Test-Path (Join-Path $r 'package.json')) {
              [void]$projects.Add($r)
              Write-Host "Root (param): $r"
            } else {
              Write-Warning "package.json not found under: $r (skipped)"
            }
          }
        } else {
          if ($locks.Count -gt 0) {
            foreach ($l in $locks) { [void]$projects.Add($l.Directory.FullName) }
          } elseif ($pkgs.Count -gt 0) {
            foreach ($p in $pkgs) { [void]$projects.Add($p.Directory.FullName) }
          }
          $projects = $projects | Select-Object -Unique
          foreach ($p in $projects) { Write-Host "Root (auto): $p" }
        }

        $json = (@($projects) | ConvertTo-Json -Compress)
        Write-Host "##vso[task.setvariable variable=npmRootsJson;isOutput=true]$json"
        Write-Host "Resolved npm roots JSON: $json"

  - task: PowerShell@2
    displayName: "Generate npm SBOMs (CycloneDX, JSON)"
    inputs:
      pwsh: true
      targetType: inline
      script: |
        $ErrorActionPreference = 'Stop'
        
        New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom" -Force | Out-Null
        New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom/npm" -Force | Out-Null
        
        if ($env:SBOM_NODE_BIN) { $env:PATH = "$env:SBOM_NODE_BIN;$env:PATH" }
        npm config set cache "$(Pipeline.Workspace)/.npm" --global | Out-Null
        
        $rootsJson = '$(resolveNpmRoots.npmRootsJson)'
        $projects = @()
        try { $projects = $rootsJson | ConvertFrom-Json } catch { $projects=@() }
        $count = ($projects | Measure-Object).Count
        if ($count -eq 0) {
          Write-Host "##[section]npm summary → ok=0, failed=0"
          Write-Warning "No npm projects discovered. Set npmRootsMultiline or commit lockfiles."
          exit 0
        }
        
        $includeLt = "${{ parameters.includeLicenseTexts }}" -eq "True"
        $format = 'json'; $ext='json'
        $ok=0; $fail=0
        
        foreach ($proj in $projects) {
          $name = Split-Path $proj -Leaf
          if ([string]::IsNullOrWhiteSpace($name)) { $name = 'app' }
          $safe = ($name -replace '[<>:"/\\|?*]', '-').Trim().TrimEnd('.',' ')
          $outDir = Join-Path "$(Agent.TempDirectory)/sbom/npm" $safe
          New-Item -ItemType Directory -Path $outDir -Force | Out-Null
          $outFile = Join-Path $outDir "$safe-sbom.$ext"
        
          Write-Host "##[group]JS SBOM → $proj"
          Push-Location $proj
          try {
            $lockPath = Join-Path $proj 'package-lock.json'
            $hasLock = Test-Path -LiteralPath $lockPath
            if (-not $hasLock -and (Test-Path -LiteralPath (Join-Path $proj 'package.json'))) {
              npm install --package-lock-only --ignore-scripts --no-audit --no-fund
              $hasLock = Test-Path -LiteralPath $lockPath
              if (-not $hasLock) { throw "Failed to create package-lock.json" }
              npm ci --ignore-scripts --no-audit --no-fund --no-progress
            }
        
            $args = @('--output-format', $format, '--output-file', $outFile)
            if ($includeLt) { $args += @('--gather-license-texts') }
            if ($hasLock)   { $args += @('--package-lock-only') }
        
            npx --yes -p @cyclonedx/cyclonedx-npm@4 cyclonedx-npm @args
            if (Test-Path $outFile) { $ok++ } else { $fail++ }
          } catch {
            Write-Warning "cyclonedx-npm failed: $($_.Exception.Message)"; $fail++
          } finally {
            Pop-Location | Out-Null
            Write-Host "Output: $outFile"
            Write-Host "##[endgroup]"
          }
        }
        
        Write-Host "##[section]npm summary → ok=$ok, failed=$fail"
        if ($fail -gt 0) { Write-Host "##vso[task.logissue type=warning]Some JS SBOMs failed"; exit 1 }

  - ${{ if eq(parameters.publishArtifact, true) }}:
    - task: PublishPipelineArtifact@1
      displayName: "Publish SBOM artifact"
      inputs:
        targetPath: "$(Agent.TempDirectory)/sbom"
        publishLocation: pipeline
        artifact: ${{ parameters.artifactName }}
