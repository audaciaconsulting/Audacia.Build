# Template: generate .NET SBOMs using CycloneDX
parameters:
  - name: dotnetProjectsMultiline
    type: string
    default: ''

steps:
  - powershell: |
      New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom/dotnet" -Force | Out-Null
    displayName: "Prepare .NET SBOM output folders"

  - task: DotNetCoreCLI@2
    displayName: "Restore .NET projects (pre-warm for CycloneDX)"
    condition: and(succeeded(), ne('${{ parameters.dotnetProjectsMultiline }}',''))
    inputs:
      command: restore
      projects: |
        ${{ parameters.dotnetProjectsMultiline }}
      vstsFeed: 'Audacia.Public/AudaciaPublic'

  - task: PowerShell@2
    displayName: "Generate .NET SBOMs (CycloneDX, JSON)"
    inputs:
      targetType: inline
      script: |
        # Generates .NET SBOMs using CycloneDX for the specified .NET project paths.
        param()
        
        $ErrorActionPreference = 'Stop'
        $DotnetProjectsJson = '$(resolveDotnetProjects.dotnetProjectsJson)'
        $OutputDir = '$(Agent.TempDirectory)/sbom/dotnet'

        $projPaths = @()
        try {
            $projPaths = $DotnetProjectsJson | ConvertFrom-Json
        } catch {
            Write-Host "##vso[task.logissue type=warning]Invalid dotnetProjectsJson: $DotnetProjectsJson"
            $projPaths = @()
        }

        if ($projPaths.Count -eq 0) {
            Write-Host "##vso[task.logissue type=warning].NET project list empty; skipping"
            exit 0
        }

        $format = 'Json'; $ext = 'json'
        $ok = 0; $fail = 0

        foreach ($p in $projPaths) {
            $base = [System.IO.Path]::GetFileNameWithoutExtension($p)
            $fileName = "{0}-sbom.{1}" -f $base, $ext

            Write-Host "##[group].NET → $p"
            try {
                dotnet restore "$p" | Out-Null
                dotnet CycloneDX "$p" -o "$OutputDir" -F "$format" -fn "$fileName"
                if ($LASTEXITCODE -ne 0) { throw "CycloneDX exit code: $LASTEXITCODE" }
                if (Test-Path (Join-Path $OutputDir $fileName)) { $ok++ } else { $fail++ }
            } catch {
                Write-Warning "CycloneDX .NET failed: $($_.Exception.Message)"
                $fail++
            } finally {
                Write-Host "Output: $(Join-Path $OutputDir $fileName)"
                Write-Host "##[endgroup]"
            }
        }

        Write-Host "##[section].NET summary → ok=$ok, failed=$fail"
        if ($fail -gt 0) { Write-Host "##vso[task.logissue type=warning]Some .NET SBOMs failed" }
        if ($fail -gt 0) { exit 1 }
      pwsh: true
