# Template: generate .NET SBOMs using CycloneDX
# This YAML file defines a pipeline step for generating Software Bill of Materials (SBOMs)
# for .NET projects using CycloneDX. It includes parameters and steps for restoring projects
# and generating SBOMs in JSON format.

parameters:
  # Parameter: dotnetProjectsMultiline
  # A multiline string containing paths to .NET projects. Defaults to an empty string.
  - name: dotnetProjectsMultiline
    type: string
    default: ''

steps:
  # Step: Restore .NET projects
  # This step restores the .NET projects specified in the `dotnetProjectsMultiline` parameter.
  # Only run restore when .NET project paths are provided.
  # This prevents running restore with an empty list (e.g., for npm-only repos).
  - task: DotNetCoreCLI@2
    displayName: "Restore .NET projects"
    condition: and(succeeded(), ne('${{ parameters.dotnetProjectsMultiline }}',''))
    inputs:
      command: restore
      projects: |
        ${{ parameters.dotnetProjectsMultiline }}
      vstsFeed: 'Audacia.Public/AudaciaPublic'

  # Step: Generate .NET SBOMs (CycloneDX, JSON)
  # This step generates SBOMs for the restored .NET projects in JSON format using CycloneDX.
  - task: PowerShell@2
    displayName: "Generate .NET SBOMs (CycloneDX, JSON)"
    inputs:
      targetType: inline
      script: |
        # Create the output directory for SBOMs
        New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom/dotnet" -Force | Out-Null

        # Set error handling to stop on errors
        $ErrorActionPreference = 'Stop'

        # Retrieve the JSON string of .NET project paths
        $DotnetProjectsJson = '$(resolveDotnetProjects.dotnetProjectsJson)'
        $OutputDir = '$(Agent.TempDirectory)/sbom/dotnet'

        # Initialize an array to store project paths
        $projPaths = @()
        try {
            # Convert the JSON string to an array of project paths
            $projPaths = $DotnetProjectsJson | ConvertFrom-Json
        } catch {
            # Log a warning if the JSON is invalid
            Write-Host "##vso[task.logissue type=warning]Invalid dotnetProjectsJson: $DotnetProjectsJson"
            $projPaths = @()
        }

        # Exit if no projects are found
        if ($projPaths.Count -eq 0) {
            Write-Host "##vso[task.logissue type=warning].NET project list empty; skipping"
            exit 0
        }

        # Define the output format and file extension for SBOMs
        $format = 'Json'; $ext = 'json'
        $ok = 0; $fail = 0

        # Loop through each project path to generate SBOMs
        foreach ($p in $projPaths) {
            $base = [System.IO.Path]::GetFileNameWithoutExtension($p)
            $fileName = "{0}-sbom.{1}" -f $base, $ext

            Write-Host "##[group].NET → $p"
            try {
                # Generate the SBOM using CycloneDX
                dotnet CycloneDX "$p" -o "$OutputDir" -F "$format" -fn "$fileName"
                if ($LASTEXITCODE -ne 0) { throw "CycloneDX exit code: $LASTEXITCODE" }
                if (Test-Path (Join-Path $OutputDir $fileName)) { $ok++ } else { $fail++ }
            } catch {
                # Log a warning if SBOM generation fails
                Write-Warning "CycloneDX .NET failed: $($_.Exception.Message)"
                $fail++
            } finally {
                # Log the output file path
                Write-Host "Output: $(Join-Path $OutputDir $fileName)"
                Write-Host "##[endgroup]"
            }
        }

        # Log a summary of the SBOM generation results
        Write-Host "##[section].NET summary → ok=$ok, failed=$fail"
        if ($fail -gt 0) { Write-Host "##vso[task.logissue type=warning]Some .NET SBOMs failed" }
        if ($fail -gt 0) { exit 1 }
      pwsh: true
