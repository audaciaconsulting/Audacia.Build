# Template: generate .NET SBOMs using CycloneDX
# This YAML file defines a pipeline step for generating Software Bill of Materials (SBOMs)
# for .NET projects using CycloneDX. It includes parameters and steps for restoring projects
# and generating SBOMs in JSON format.

parameters:
  # Parameter: dotnetProjectsMultiline
  # A multiline string containing paths to .NET projects. Defaults to an empty string.
  - name: dotnetProjectsMultiline
    type: string
    default: ''
  # Parameter: vstsFeed
  # The Azure DevOps feed to use for restoring NuGet packages. Defaults to an empty string.
  # Example: 'MyOrg/MyFeedName'
  - name: vstsFeed
    type: string
    default: ''
  # Parameter: nugetConfigPath
  # The path to the NuGet configuration file. Defaults to an empty string.
  # Example: '$(System.DefaultWorkingDirectory)/NuGet.config'
  - name: nugetConfigPath
    type: string
    default: ''

steps:
  # Step: Restore .NET projects
  # This step restores the .NET projects specified in the `dotnetProjectsMultiline` parameter.
  # It only runs if the `dotnetProjectsMultiline` parameter is not empty, preventing unnecessary
  # restore operations for repositories without .NET projects.
  - task: DotNetCoreCLI@2
    displayName: "Restore .NET projects"
    condition: and(succeeded(), ne('${{ parameters.dotnetProjectsMultiline }}',''))
    inputs:
      command: restore
      projects: |
        ${{ parameters.dotnetProjectsMultiline }}
      ${{ if ne(parameters.nugetConfigPath, '') }}:
        nugetConfigPath: ${{ parameters.nugetConfigPath }}
      ${{ if and(eq(parameters.nugetConfigPath, ''), ne(parameters.vstsFeed, '')) }}:
        vstsFeed: ${{ parameters.vstsFeed }}

  # Step: Generate .NET SBOMs (CycloneDX, JSON)
  # This step generates SBOMs for the restored .NET projects in JSON format using CycloneDX.
  - task: PowerShell@2
    displayName: "Generate .NET SBOMs (CycloneDX, JSON)"
    inputs:
      targetType: inline
      script: |
        # Create the output directory for SBOMs if it does not exist
        New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom/dotnet" -Force | Out-Null
        
        # Set error handling to stop on errors
        $ErrorActionPreference = 'Stop'
        
        # Retrieve the JSON string containing .NET project paths
        $DotnetProjectsJson = '$(resolveDotnetProjects.dotnetProjectsJson)'
        $OutputDir = '$(Agent.TempDirectory)/sbom/dotnet'

        # Initialize an array to store project paths
        $projPaths = @()
        
        # Attempt to parse the JSON string into an array of project paths
        try { 
          $projPaths = $DotnetProjectsJson | ConvertFrom-Json 
        } catch { 
          Write-Host "##vso[task.logissue type=warning]Invalid dotnetProjectsJson: $DotnetProjectsJson"; 
          $projPaths = @() 
        }
        
        # Exit if no project paths are provided
        if ($projPaths.Count -eq 0) { 
          Write-Host "##vso[task.logissue type=warning].NET project list empty; skipping"; 
          exit 0 
        }
        
        # Define output format and file extension for SBOMs
        $format = 'Json'; 
        $ext = 'json'; 
        $ok = 0; 
        $fail = 0
        
        # Iterate over each project path to generate SBOMs
        foreach ($p in $projPaths) {
          $base = [System.IO.Path]::GetFileNameWithoutExtension($p)
          $fileName = "{0}-sbom.{1}" -f $base, $ext
        
          # Log the current project being processed
          Write-Host "##[group].NET → $p"
          try {
            # Run CycloneDX to generate the SBOM
            dotnet CycloneDX "$p" -o "$OutputDir" -F "$format" -fn "$fileName"
        
            # Check if the SBOM file was successfully created
            if ($LASTEXITCODE -ne 0) { 
              throw "CycloneDX exit code: $LASTEXITCODE" 
            }
            if (Test-Path (Join-Path $OutputDir $fileName)) { 
              $ok++ 
            } else { 
              $fail++ 
            }
          } catch {
            # Log a warning if CycloneDX fails
            Write-Warning "CycloneDX .NET failed: $($_.Exception.Message)"; 
            $fail++
          } finally {
            # Log the output file path and end the log group
            Write-Host "Output: $(Join-Path $OutputDir $fileName)"; 
            Write-Host "##[endgroup]"
          }
        }
        
        # Log a summary of the SBOM generation process
        Write-Host "##[section].NET summary → ok=$ok, failed=$fail"
        
        # Exit with an error if any SBOM generation failed
        if ($fail -gt 0) { 
          Write-Host "##vso[task.logissue type=warning]Some .NET SBOMs failed"; 
          exit 1 
        }
      pwsh: true
