# This YAML file defines a step template for logging environment variables and parameters,
# as well as discovering npm manifests (package.json and package-lock.json files) in a workspace.

parameters:
  # Parameter: npmRootsMultiline
  # Description: A multiline string containing paths to specific npm root directories to scan.
  - name: npmRootsMultiline
    type: string
    default: ''

  # Parameter: includeLicenseTexts
  # Description: A boolean flag indicating whether to include license texts in the output.
  - name: includeLicenseTexts
    type: boolean
    default: true

  # Parameter: requireAllExpectedSboms
  # Description: A boolean flag indicating whether all expected SBOMs (Software Bill of Materials) are required.
  - name: requireAllExpectedSboms
    type: boolean
    default: true

steps:
  - pwsh: |
      # Set the error action preference to stop on errors
      $ErrorActionPreference = 'Stop'

      # Log environment variables and parameters
      Write-Host "##[group]Environment & Parameters"
      Write-Host "Agent.OS: $env:AGENT_OS"
      Write-Host "Output format: JSON (forced)"
      Write-Host "Include license texts: $env:INCLUDE_LICENSE_TEXTS"
      Write-Host "Require all expected SBOMs: $env:REQUIRE_ALL_EXPECTED_SBOMS"
      Write-Host "SBOM output dir: $(Agent.TempDirectory)/sbom"
      Write-Host "Sources: $(System.DefaultWorkingDirectory)"
      Write-Host "##[endgroup]"

      # Read and process the npmRootsMultiline parameter
      $rootsText = ($env:NPM_ROOTS_MULTILINE ?? '').Trim()

      # Log and discover npm manifests
      Write-Host "##[group]Debug: list npm manifests"
      if ($rootsText) {
        # If specific npm roots are provided, scan those directories
        Write-Host "Scanning npm roots from parameter:"
        $roots = $rootsText -split "`r?`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -and -not $_.StartsWith('#') }
        foreach ($r in $roots) {
          Write-Host "Root: $r"
          "---- $r\package-lock.json ----"
          Get-ChildItem -Path $r -Recurse -Filter package-lock.json -File -EA SilentlyContinue | Select-Object -Expand FullName
          "---- $r\package.json ----"
          Get-ChildItem -Path $r -Recurse -Filter package.json -File -EA SilentlyContinue | Select-Object -Expand FullName
        }
      } else {
        # If no npm roots are provided, scan the entire workspace
        Write-Host "Scanning entire workspace (no npmRootsMultiline provided)"
        "---- package-lock.json files ----"
        Get-ChildItem -Path '$(System.DefaultWorkingDirectory)' -Recurse -Filter package-lock.json -File -EA SilentlyContinue |
          Select-Object -Expand FullName
        "---- package.json files ----"
        Get-ChildItem -Path '$(System.DefaultWorkingDirectory)' -Recurse -Filter package.json -File -EA SilentlyContinue |
          Select-Object -Expand FullName
      }
      Write-Host "##[endgroup]"
    displayName: "Log env & discover npm manifests"
    env:
      # Map the parameters to environment variables for use in the script
      NPM_ROOTS_MULTILINE: ${{ parameters.npmRootsMultiline }}
      INCLUDE_LICENSE_TEXTS: ${{ parameters.includeLicenseTexts }}
      REQUIRE_ALL_EXPECTED_SBOMS: ${{ parameters.requireAllExpectedSboms }}
