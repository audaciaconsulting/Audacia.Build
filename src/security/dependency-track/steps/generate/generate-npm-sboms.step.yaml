# Template: generate npm SBOMs using CycloneDX
parameters:
  - name: includeLicenseTexts
    type: boolean
    default: true

steps:
  # Generate npm SBOMs (CycloneDX, JSON)
  - task: PowerShell@2
    displayName: "Generate npm SBOMs (CycloneDX, JSON)"
    inputs:
      targetType: inline
      script: |
        New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom" -Force | Out-Null
        New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom/npm" -Force | Out-Null
        
        $ErrorActionPreference = 'Stop'

        if ($env:SBOM_NODE_BIN) { $env:PATH = "$env:SBOM_NODE_BIN;$env:PATH" }

        npm config set cache "$(Pipeline.Workspace)/.npm" --global | Out-Null

        $NpmRootsJson = '$(resolveNpmRoots.npmRootsJson)'
        $OutputDir = '$(Agent.TempDirectory)/sbom/npm'
        $IncludeLicenseTexts = ${{ parameters.includeLicenseTexts }}

        $projects = @()
        try { $projects = $NpmRootsJson | ConvertFrom-Json } catch {
          Write-Host "##vso[task.logissue type=warning]Invalid npmRootsJson: $NpmRootsJson"
          $projects = @()
        }

        $count = ($projects | Measure-Object).Count
        if ($count -eq 0) {
          Write-Host "##[section]npm summary → ok=0, failed=0"
          Write-Host "##vso[task.logissue type=warning]No npm projects discovered. Set npmRootsMultiline or commit lockfiles."
          exit 0
        }

        $npmOk = 0; $npmFail = 0
        $format = 'json'; $fileExt = 'json'

        foreach ($proj in $projects) {
          $name = Split-Path $proj -Leaf
          if ([string]::IsNullOrWhiteSpace($name)) { $name = 'app' }
          $safe = ($name -replace '[<>:"/\\|?*]', '-').Trim().TrimEnd('.',' ')
          $outDir = Join-Path $OutputDir $safe
          New-Item -ItemType Directory -Path $outDir -Force | Out-Null
          $outFile = Join-Path $outDir ("$safe-sbom.$fileExt")

          Write-Host "##[group]JS SBOM → $proj"
          Push-Location $proj
          try {
            $lockPath = Join-Path $proj 'package-lock.json'
            $hasLock = Test-Path -LiteralPath $lockPath

            if (-not $hasLock -and (Test-Path -LiteralPath (Join-Path $proj 'package.json'))) {
              npm install --package-lock-only --ignore-scripts --no-audit --no-fund
              $hasLock = Test-Path -LiteralPath $lockPath
              if (-not $hasLock) { throw "Failed to create package-lock.json" }

              npm ci --ignore-scripts --no-audit --no-fund --no-progress
            }

            $args = @('--output-format', $format, '--output-file', $outFile)
            if ($IncludeLicenseTexts) { $args += @('--gather-license-texts') }
            if ($hasLock) { $args += @('--package-lock-only') }

            # Pin to major for stability
            npx --yes -p @cyclonedx/cyclonedx-npm@4 cyclonedx-npm @args

            if (Test-Path $outFile) { $npmOk++ } else { $npmFail++ }
          } catch {
            Write-Warning "cyclonedx-npm failed: $($_.Exception.Message)"
            $npmFail++
          } finally {
            Pop-Location | Out-Null
            Write-Host "Output: $outFile"
            Write-Host "##[endgroup]"
          }
        }

        Write-Host "##[section]npm summary → ok=$npmOk, failed=$npmFail"
        if ($npmFail -gt 0) { Write-Host "##vso[task.logissue type=warning]Some JS SBOMs failed" }
        if ($npmFail -gt 0) { exit 1 }
      pwsh: true
