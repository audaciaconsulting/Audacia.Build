# Template: generate npm SBOMs using CycloneDX
parameters:
  # Parameter: includeLicenseTexts
  # - A boolean parameter to determine whether to include license texts in the SBOMs
  # - Default value is true
  - name: includeLicenseTexts
    type: boolean
    default: true

steps:
  # Step: Prepare npm SBOM output folders
  # - Creates the necessary directories for storing npm SBOM files
  # - Ensures the directories exist before proceeding
  - powershell: |
      New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom" -Force | Out-Null
      New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom/npm" -Force | Out-Null
    displayName: "Prepare npm SBOM output folders"

  # Step: Generate npm SBOMs (CycloneDX, JSON)
  # - Generates SBOMs for npm projects in JSON format using CycloneDX
  # - Reads the list of npm project roots from the `resolveNpmRoots.npmRootsJson` variable
  # - Iterates through each project, ensuring dependencies are installed and generating SBOMs
  # - Logs success or failure for each project and provides a summary
  - task: PowerShell@2
    displayName: "Generate npm SBOMs (CycloneDX, JSON)"
    inputs:
      targetType: inline
      script: |
        # Set error handling to stop on errors
        $ErrorActionPreference = 'Stop'

        # Read the JSON string containing npm project roots
        $NpmRootsJson = '$(resolveNpmRoots.npmRootsJson)'
        $OutputDir = '$(Agent.TempDirectory)/sbom/npm'
        $IncludeLicenseTexts = ${{ parameters.includeLicenseTexts }}

        # Restore Node tooling from environment variables
        if ($env:SBOM_NODE_BIN) { $env:PATH = "$env:SBOM_NODE_BIN;$env:PATH" }

        # Initialize an empty array for project paths
        $projects = @()
        try {
            # Attempt to parse the JSON string into an array
            $projects = $NpmRootsJson | ConvertFrom-Json
        } catch {
            Write-Host "##vso[task.logissue type=warning]Invalid npmRootsJson: $NpmRootsJson"
            $projects = @()
        }

        # Exit early if no projects are found
        $count = ($projects | Measure-Object).Count
        if ($count -eq 0) {
            Write-Host "##[section]npm summary → ok=0, failed=0"
            Write-Host "##vso[task.logissue type=warning]No npm projects discovered. Set npmRootsMultiline or commit lockfiles."
            exit 0
        }

        # Initialize counters for success and failure
        $npmOk = 0; $npmFail = 0
        $format = 'json'; $fileExt = 'json'

        # Iterate through each project path
        foreach ($proj in $projects) {
            # Derive a safe directory name for the project
            $name = Split-Path $proj -Leaf
            if ([string]::IsNullOrWhiteSpace($name)) { $name = 'app' }
            $safe = ($name -replace '[<>:"/\\|?*]', '-').Trim().TrimEnd('.',' ')
            $outDir = Join-Path $OutputDir $safe
            New-Item -ItemType Directory -Path $outDir -Force | Out-Null
            $outFile = Join-Path $outDir ("$safe-sbom.$fileExt")

            Write-Host "##[group]JS SBOM → $proj"
            Push-Location $proj
            try {
                # Check for the existence of a package-lock.json file
                $hasLock = Test-Path -LiteralPath (Join-Path $proj 'package-lock.json')
                if (-not $hasLock -and (Test-Path -LiteralPath (Join-Path $proj 'package.json'))) {
                    # Generate a package-lock.json file if it does not exist
                    npm install --package-lock-only --ignore-scripts --no-audit --no-fund
                    $hasLock = Test-Path -LiteralPath (Join-Path $proj 'package-lock.json')
                    if (-not $hasLock) { throw "Failed to create package-lock.json" }
                }

                # Check if node_modules exists and install dependencies if necessary
                $nodeModules = Join-Path $proj 'node_modules'
                $needInstall = -not (Test-Path $nodeModules) -or @((Get-ChildItem -Path $nodeModules -Force -ErrorAction SilentlyContinue) | Measure-Object).Count -eq 0
                if ($needInstall) {
                    npm ci --ignore-scripts --no-audit --no-fund --no-progress
                }

                # Generate the SBOM using CycloneDX
                $args = @('--output-format', $format, '--output-file', $outFile)
                if ($IncludeLicenseTexts) { $args += @('--gather-license-texts') }

                npx --yes -p @cyclonedx/cyclonedx-npm@latest cyclonedx-npm @args

                # Increment success or failure counters based on the result
                if (Test-Path $outFile) { $npmOk++ } else { $npmFail++ }
            } catch {
                Write-Warning "cyclonedx-npm failed: $($_.Exception.Message)"
                $npmFail++
            } finally {
                # Restore the previous working directory and log the output file path
                Pop-Location | Out-Null
                Write-Host "Output: $outFile"
                Write-Host "##[endgroup]"
            }
        }

        Write-Host "##[section]npm summary → ok=$npmOk, failed=$npmFail"
        if ($npmFail -gt 0) { Write-Host "##vso[task.logissue type=warning]Some JS SBOMs failed" }
        if ($npmFail -gt 0) { exit 1 }
      pwsh: true
