# Template: generate .NET SBOMs using CycloneDX

parameters:
  - name: dotnetProjects
    type: object
    default: []
  - name: vstsFeed
    type: string
    default: ''
  - name: nugetConfigPath
    type: string
    default: ''
  - name: publishArtifact
    type: boolean
    default: false
  - name: artifactName
    type: string
    default: 'sbom-files'

steps:
  - task: NuGetAuthenticate@1
    displayName: "Authenticate to Azure Artifacts"

  - task: DotNetCoreCLI@2
    displayName: "Restore .NET projects"
    condition: and(succeeded(), ne(${{ length(parameters.dotnetProjects) }}, 0))
    inputs:
      command: restore
      projects: ${{ join(parameters.dotnetProjects, '\n') }}
      ${{ if ne(parameters.nugetConfigPath, '') }}:
        nugetConfigPath: ${{ parameters.nugetConfigPath }}
      ${{ if and(eq(parameters.nugetConfigPath, ''), ne(parameters.vstsFeed, '')) }}:
        vstsFeed: ${{ parameters.vstsFeed }}


  - task: PowerShell@2
    displayName: "Install CycloneDX .NET tool"
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $ErrorActionPreference = 'Stop'
        Write-Host "##[group]Install CycloneDX .NET tool"
        dotnet tool update --global CycloneDX
        if ($LASTEXITCODE -ne 0) {
          dotnet tool install --global CycloneDX
          if ($LASTEXITCODE -ne 0) { throw "Failed to install CycloneDX .NET tool" }
        }
        $tools = "$env:USERPROFILE\.dotnet\tools"
        Write-Host "##vso[task.prependpath]$tools"
        $env:PATH = "$tools;$env:PATH"
        dotnet CycloneDX --version | Write-Host
        Write-Host "Installed tools in: $tools"
        Write-Host "##[endgroup]"

  - task: PowerShell@2
    displayName: "Generate .NET SBOMs (CycloneDX, JSON)"
    name: genDotnet
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $ErrorActionPreference = 'Stop'
        New-Item -ItemType Directory -Path "$(Agent.TempDirectory)/sbom/dotnet" -Force | Out-Null
        $outputDir = "$(Agent.TempDirectory)/sbom/dotnet"

        # Receive the YAML list as JSON so PowerShell gets a real array
        $projJson = @'
        ${{ convertToJson(parameters.dotnetProjects) }}
        '@
        $projects = @()
        try { $projects = $projJson | ConvertFrom-Json } catch { $projects = @() }

        if (-not $projects -or $projects.Count -eq 0) {
          Write-Host "##[section].NET summary → ok=0, failed=0"
          Write-Warning "No .NET projects provided; skipping .NET generation."
          exit 0
        }

        $ok=0; $fail=0
        foreach ($p in $projects) {
          $base = [IO.Path]::GetFileNameWithoutExtension($p)
          $file = "$base-sbom.json"
          Write-Host "##[group].NET → $p"
          try {
            dotnet CycloneDX "$p" -o "$outputDir" -F Json -fn "$file"
            if ($LASTEXITCODE -ne 0) { throw "CycloneDX exit code: $LASTEXITCODE" }
            if (Test-Path (Join-Path $outputDir $file)) { $ok++ } else { $fail++ }
          } catch {
            Write-Warning "CycloneDX .NET failed: $($_.Exception.Message)"; $fail++
          } finally {
            Write-Host "Output: $(Join-Path $outputDir $file)"
            Write-Host "##[endgroup]"
          }
        }

        Write-Host "##[section].NET summary → ok=$ok, failed=$fail"
        if ($fail -gt 0) { Write-Host "##vso[task.logissue type=warning]Some .NET SBOMs failed"; exit 1 }

    ${{ if eq(parameters.publishArtifact, true) }}:
    - task: PublishPipelineArtifact@1
      displayName: "Publish SBOM artifact"
      inputs:
        targetPath: "$(Agent.TempDirectory)/sbom"
        publishLocation: pipeline
        artifact: ${{ parameters.artifactName }}
