# Template: verify Dependency-Track reflects expected (Project, Version) as latest after upload
parameters:
  - name: enforce
    type: boolean
    default: false  # if true, fail if any project isn't latest / can't be found

steps:
  - task: PowerShell@2
    displayName: "Verify Dependency-Track project state (post-upload)"
    env:
      DT_API_URL: $(DT_API_URL)
      DT_API_KEY: $(DT_API_KEY)
      # Comes from the upload step's output variable (always a JSON array string per upload-sboms.step.yaml)
      UPLOADED_ROWS_JSON: $(uploadScript.uploadedRowsJson)
    inputs:
      pwsh: true
      targetType: inline
      script: |
        $ErrorActionPreference = 'Stop'

        if ([string]::IsNullOrWhiteSpace($env:DT_API_URL) -or [string]::IsNullOrWhiteSpace($env:DT_API_KEY)) {
          throw "DT_API_URL and/or DT_API_KEY not set. Check the 'Dependency-Track' variable group."
        }
        $base = "$($env:DT_API_URL)".TrimEnd('/')
        Write-Host "Verifying against: $base"

        # Defensive default for empty/undefined input
        $raw = $env:UPLOADED_ROWS_JSON
        if (-not $raw -or [string]::IsNullOrWhiteSpace($raw)) { $raw = '[]' }

        try {
          $pairs = $raw | ConvertFrom-Json
        } catch {
          Write-Error "UPLOADED_ROWS_JSON could not be parsed as JSON."
          exit 1
        }

        # Normalize to array
        if ($pairs -isnot [System.Collections.IEnumerable]) { $pairs = @($pairs) }
        if (-not $pairs) { $pairs = @() }

        Add-Type -AssemblyName System.Net.Http
        $http = [System.Net.Http.HttpClient]::new()
        $http.Timeout = [TimeSpan]::FromMinutes(5)
        $http.DefaultRequestHeaders.Add('X-Api-Key', $env:DT_API_KEY)

        function Invoke-DtApi([string]$method, [string]$path, [object]$body=$null, [int]$retries=3, [string]$baseUrl) {
          $attempt = 0
          $lastErr = $null
          do {
            try {
              $uri  = "$baseUrl$path"
              $msg  = [System.Net.Http.HttpRequestMessage]::new($method, $uri)
              if ($body -ne $null) {
                $json = $body | ConvertTo-Json -Depth 8
                $msg.Content = [System.Net.Http.StringContent]::new($json, [Text.Encoding]::UTF8, 'application/json')
              }
              $resp = $http.SendAsync($msg).GetAwaiter().GetResult()
              $txt  = $resp.Content.ReadAsStringAsync().GetAwaiter().GetResult()
              if ($resp.IsSuccessStatusCode) { return $txt }
              if ([int]$resp.StatusCode -ge 500) { throw "HTTP $($resp.StatusCode): $txt" }
              throw "API $method $path failed ($($resp.StatusCode)): $txt"
            } catch {
              $lastErr = $_
              $retryable = ($lastErr.Exception -is [System.Net.Http.HttpRequestException]) -or
                           ($lastErr.Exception -is [System.TimeoutException]) -or
                           ($lastErr.Exception -is [System.Net.WebException]) -or
                           ($lastErr.Exception.Message -match '^HTTP 5\d{2}:')
              if (-not $retryable -or $attempt -ge $retries) { throw $lastErr }
              $delay = [int][math]::Pow(2, [double]$attempt)
              Write-Warning "Transient error calling $path. Retry in ${delay}s (attempt $($attempt+1)/$retries): $($lastErr.Exception.Message)"
              Start-Sleep -Seconds $delay
              $attempt++
            }
          } while ($true)
        }

        $rows = New-Object System.Collections.Generic.List[object]

        foreach ($p in $pairs) {
          $name = $p.Project
          $version = $p.Version

          if ([string]::IsNullOrWhiteSpace($name) -or [string]::IsNullOrWhiteSpace($version)) {
            $rows.Add([pscustomobject]@{
              Project = $name
              Version = $version
              Exists  = 'NO'
              IsLatest = 'N/A'
              Note    = 'Missing project or version value'
            })
            continue
          }

          $encName = [System.Web.HttpUtility]::UrlEncode($name)
          $encVer  = [System.Web.HttpUtility]::UrlEncode($version)

          try {
            $json = Invoke-DtApi -method GET -path "/v1/project/lookup?name=$encName&version=$encVer" -baseUrl $base
            if (-not $json) {
              $rows.Add([pscustomobject]@{ Project=$name; Version=$version; Exists='NO'; IsLatest='N/A'; Note='Not found' })
              continue
            }
            $obj = $json | ConvertFrom-Json

            $exists   = ($null -ne $obj -and $obj.uuid)
            $isLatest = $false
            if ($exists -and ($obj.PSObject.Properties.Name -contains 'isLatest')) { $isLatest = [bool]$obj.isLatest }

            $rows.Add([pscustomobject]@{
              Project = $name
              Version = $version
              Exists  = $(if($exists) {'YES'} else {'NO'})
              IsLatest = $(if($exists) { $(if($isLatest){'YES'}else{'NO'}) } else {'N/A'})
              Note    = $(if($exists) { "uuid=$($obj.uuid)" } else { "Not found" })
            })
          } catch {
            $rows.Add([pscustomobject]@{
              Project = $name
              Version = $version
              Exists  = 'UNKNOWN'
              IsLatest = 'UNKNOWN'
              Note    = "Lookup error: $($_.Exception.Message)"
            })
          }
        }

        # Build Markdown summary
        $md = New-Object System.Collections.Generic.List[string]
        $md.Add("# Dependency-Track Post-Upload Verification")
        $md.Add("")
        if ($rows.Count -eq 0) {
          $md.Add("_No projects to verify (empty input)._")
        } else {
          $md.Add("| Project | Version | Exists | Is Latest | Note |")
          $md.Add("|---|---|:---:|:---:|---|")
          foreach ($r in $rows) {
            $md.Add("| $($r.Project) | $($r.Version) | $($r.Exists) | $($r.IsLatest) | $($r.Note -replace '\r?\n',' ') |")
          }
        }

        $summaryPath = Join-Path $env:AGENT_TEMPDIRECTORY "dt-verify-summary.md"
        Set-Content -LiteralPath $summaryPath -Value ($md -join "`r`n") -Encoding UTF8
        Write-Host "##vso[task.uploadsummary]$summaryPath"

        # Enforce mode: fail if any row is not found or not latest
        $shouldFail = $false
        if ("${{ parameters.enforce }}" -eq "True") {
          foreach ($r in $rows) {
            if ($r.Exists -ne 'YES' -or $r.IsLatest -ne 'YES') { $shouldFail = $true; break }
          }
          if ($shouldFail) {
            Write-Error "Post-upload verification failed (enforce=true): at least one project is missing or not marked as latest."
            exit 1
          }
        }
        Write-Host "Verification complete."
