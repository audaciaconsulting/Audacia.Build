# Step: Upload SBOMs to Dependency-Track with token wait
parameters:
  - name: failOnUploadError
    type: boolean
    default: true
  - name: validationOnly
    type: boolean
    default: false
  - name: bomProcessingTimeoutSec
    type: number
    default: 300
  # Optional parent project parameters (leave blank for no parent linkage)
  - name: parentProjectName
    type: string
    default: ''
  - name: parentProjectVersion
    type: string
    default: ''

steps:
  - task: PowerShell@2
    name: uploadScript
    displayName: "Upload SBOMs to Dependency-Track"
    env:
      # API + context
      DT_API_URL: $(DT_API_URL)
      DT_API_KEY: $(DT_API_KEY)
      CLIENT_NAME: $(CLIENT_NAME)
      ENV_NAME: $(ENV_NAME)          # optional: warn if missing, never fail
      RELEASE_NUMBER: $(RELEASE_NUMBER)
      ADDITIONAL_TAGS: $(ADDITIONAL_TAGS)
      # Inputs from earlier steps
      PROJECT_TAGS_CSV: $(buildTags.projectTagsCsv)
      # Path produced by preflight step
      UPLOAD_MATRIX_PATH: $(preflight.UploadMatrixPath)
    inputs:
      pwsh: true
      targetType: inline
      script: |
        $ErrorActionPreference = 'Stop'

        if (-not $env:ENV_NAME -or [string]::IsNullOrWhiteSpace($env:ENV_NAME)) {
          Write-Warning "ENV_NAME is empty or not set; proceeding without an environment tag."
        }

        if ([string]::IsNullOrWhiteSpace($env:DT_API_URL) -or [string]::IsNullOrWhiteSpace($env:DT_API_KEY)) {
          throw "DT_API_URL and/or DT_API_KEY not set. Check the 'Dependency-Track' variable group."
        }
        $apiBaseUrl = "$($env:DT_API_URL)".TrimEnd('/')
        Write-Host "Using Dependency-Track API base: $apiBaseUrl"

        $uploadMatrixPath = $env:UPLOAD_MATRIX_PATH
        if (-not $uploadMatrixPath -or -not (Test-Path -LiteralPath $uploadMatrixPath)) {
          throw "Upload matrix file not found: $uploadMatrixPath"
        }
        try {
          $uploadMatrix = Get-Content -Raw -LiteralPath $uploadMatrixPath | ConvertFrom-Json
        } catch {
          throw "Upload matrix JSON invalid at $uploadMatrixPath"
        }
        if (-not $uploadMatrix -or $uploadMatrix.Count -eq 0) {
          throw "Upload matrix is empty; nothing to upload."
        }

        $ParentName    = '${{ parameters.parentProjectName }}'
        $ParentVersion = '${{ parameters.parentProjectVersion }}'
        if ($ParentName) {
          Write-Host "Parent project specified → Name='$ParentName' Version='$ParentVersion'"
        } else {
          Write-Host "No parent project specified; uploads will not set parentName/parentVersion."
        }

        if ("${{ parameters.validationOnly }}" -eq "True") {
          Write-Host "Validation-only mode enabled. Skipping upload."
          Write-Host "##vso[task.setvariable variable=uploadedRowsJson;isOutput=true][]"
          $rowsFilePath = Join-Path $env:AGENT_TEMPDIRECTORY 'dt-uploaded-rows.json'
          Set-Content -LiteralPath $rowsFilePath -Value '[]' -Encoding UTF8
          exit 0
        }

        Add-Type -AssemblyName System.Net.Http
        $httpClient = [System.Net.Http.HttpClient]::new()
        $httpClient.Timeout = [TimeSpan]::FromMinutes(10)
        $httpClient.DefaultRequestHeaders.Add('X-Api-Key', $env:DT_API_KEY)

        function Invoke-DtApi([string]$method, [string]$relativePath, [object]$body=$null, [int]$retries=3, [string]$baseUrl) {
          $attempt = 0
          $lastErr = $null
          do {
            try {
              $uri  = "$baseUrl$relativePath"
              $requestMessage  = [System.Net.Http.HttpRequestMessage]::new($method, $uri)
              if ($body -ne $null) {
                $jsonBody = $body | ConvertTo-Json -Depth 8
                $requestMessage.Content = [System.Net.Http.StringContent]::new($jsonBody, [Text.Encoding]::UTF8, 'application/json')
              }
              $requestMessage.Headers.Add('X-Api-Key', $env:DT_API_KEY)
              $response = $httpClient.SendAsync($requestMessage).GetAwaiter().GetResult()
              $responseText = $response.Content.ReadAsStringAsync().GetAwaiter().GetResult()
              if ($response.IsSuccessStatusCode) { return $responseText }
              if ([int]$response.StatusCode -ge 500) { throw "HTTP $($response.StatusCode): $responseText" }
              throw "API $method $relativePath failed ($($response.StatusCode)): $responseText"
            } catch {
              $lastErr = $_
              $retryable = ($lastErr.Exception -is [System.Net.Http.HttpRequestException]) -or
                           ($lastErr.Exception -is [System.TimeoutException]) -or
                           ($lastErr.Exception -is [System.Net.WebException]) -or
                           ($lastErr.Exception.Message -match '^HTTP 5\d{2}:')
              if (-not $retryable -or $attempt -ge $retries) { throw $lastErr }
              $delay = [int][math]::Pow(2, [double]$attempt)
              Write-Warning "Transient error calling $relativePath. Retry in ${delay}s (attempt $($attempt+1)/$retries): $($lastErr.Exception.Message)"
              Start-Sleep -Seconds $delay
              $attempt++
            }
          } while ($true)
        }

        function Wait-BomProcessed([string]$token, [int]$timeoutSec = 120) {
          if (-not $token) { return $false }
          $deadline = (Get-Date).AddSeconds($timeoutSec)
          while ((Get-Date) -lt $deadline) {
            try {
              $responseJson = Invoke-DtApi -method GET -relativePath "/v1/bom/token/$token" -baseUrl $apiBaseUrl
              if ($responseJson) {
                $tokenStatus = $responseJson | ConvertFrom-Json
                if ($null -ne $tokenStatus.processing) {
                  Write-Host "BOM token $token status: " + ($(if($tokenStatus.processing){'PROCESSING'}else{'DONE'}))
                  if (-not $tokenStatus.processing) { return $true }
                  Start-Sleep -Seconds 2
                  continue
                }
              }
            } catch {
              if ($_.Exception.Message -match '404') {
                Write-Host "BOM token $token status: DONE (token not found)"
                return $true
              }
            }
            Start-Sleep -Seconds 2
          }
          Write-Warning "BOM token $token did not reach DONE within timeout."
          return $false
        }

        $resultRows = New-Object System.Collections.Generic.List[object]
        $projectTagsCsv = $env:PROJECT_TAGS_CSV

        try {
          $uploadedCount = 0
          foreach ($item in $uploadMatrix) {
            $bomFilePath   = $item.FilePath
            $projectName    = $item.ProjectName
            $projectVersion = $item.ProjectVersion

            $bomFileInfo = Get-Item -LiteralPath $bomFilePath

            Write-Host "##[group]Uploading SBOM -> $projectName @ $projectVersion"
            Write-Host "  autoCreate: true"
            Write-Host "  isLatest: true"
            Write-Host "  projectName: $projectName"
            Write-Host "  projectVersion: $projectVersion"
            if ('${{ parameters.parentProjectName }}') {
              Write-Host "  parentName: $('${{ parameters.parentProjectName }}')"
              Write-Host "  parentVersion: $('${{ parameters.parentProjectVersion }}')"
            } else {
              Write-Host "  parentName/parentVersion: <omitted>"
            }
            Write-Host "  bom file: $($bomFileInfo.FullName)"
            if ($projectTagsCsv -and $projectTagsCsv.Trim().Length -gt 0) {
              Write-Host "  projectTags: $projectTagsCsv"
            } else {
              Write-Host "  projectTags: <none>"
            }

            try {
              $multipartForm = [System.Net.Http.MultipartFormDataContent]::new()
              $multipartForm.Add([System.Net.Http.StringContent]::new('true'), 'autoCreate')
              $multipartForm.Add([System.Net.Http.StringContent]::new('true'), 'isLatest')
              $multipartForm.Add([System.Net.Http.StringContent]::new($projectName), 'projectName')
              $multipartForm.Add([System.Net.Http.StringContent]::new($projectVersion), 'projectVersion')

              if ($ParentName) {
                $multipartForm.Add([System.Net.Http.StringContent]::new($ParentName), 'parentName')
                $multipartForm.Add([System.Net.Http.StringContent]::new($ParentVersion), 'parentVersion')
              }

              if ($projectTagsCsv -and $projectTagsCsv.Trim().Length -gt 0) {
                $multipartForm.Add([System.Net.Http.StringContent]::new($projectTagsCsv), 'projectTags')
              }

              $fs = [System.IO.File]::OpenRead($bomFileInfo.FullName)
              try {
                $fileContent = [System.Net.Http.StreamContent]::new($fs)
                $fileContent.Headers.ContentType = [System.Net.Http.Headers.MediaTypeHeaderValue]::Parse('application/json')
                $multipartForm.Add($fileContent, 'bom', $bomFileInfo.Name)
                $uploadResponse = $httpClient.PostAsync("$apiBaseUrl/v1/bom", $multipartForm).GetAwaiter().GetResult()
              } finally { $fs.Dispose() }

              if (-not $uploadResponse.IsSuccessStatusCode) {
                $responseBody = $uploadResponse.Content.ReadAsStringAsync().GetAwaiter().GetResult()
                throw "HTTP $($uploadResponse.StatusCode) - $responseBody"
              }

              $uploadResponseJson = $uploadResponse.Content.ReadAsStringAsync().GetAwaiter().GetResult() | ConvertFrom-Json
              $note = "token: $($uploadResponseJson.token)"
              Write-Host "Uploaded OK: $($bomFileInfo.FullName)  ($note)"

              $uploadedCount++
              [void](Wait-BomProcessed -token $uploadResponseJson.token -timeoutSec ${{ parameters.bomProcessingTimeoutSec }})

              $resultRows.Add([pscustomobject]@{
                File     = $bomFileInfo.Name
                SizeKB   = [int]((Get-Item $bomFileInfo.FullName).Length/1kb)
                Project  = $projectName
                Version  = $projectVersion
                Result   = 'OK'
                Note     = $note
              })
            } catch {
              $errorMessage = $_.Exception.Message
              Write-Error "❌ Upload failed for $($bomFileInfo.FullName): $errorMessage"

              $resultRows.Add([pscustomobject]@{
                File     = $bomFileInfo.Name
                SizeKB   = [int]((Get-Item $bomFileInfo.FullName).Length/1kb)
                Project  = $projectName
                Version  = $projectVersion
                Result   = 'FAILED'
                Note     = $errorMessage
              })

              throw
            } finally {
              Write-Host "##[endgroup]"
            }
          }

          $projectVersionPairs = @()
          foreach ($row in $resultRows) {
            $projectVersionPairs += @{ Project = $row.Project; Version = $row.Version }
          }
          $uploadedRowsJson = ($projectVersionPairs | ConvertTo-Json -Compress)
          if (-not $uploadedRowsJson) { $uploadedRowsJson = '[]' }

          Write-Host "##vso[task.setvariable variable=uploadedRowsJson;isOutput=true]$uploadedRowsJson"
          $rowsFilePath = Join-Path $env:AGENT_TEMPDIRECTORY 'dt-uploaded-rows.json'
          Set-Content -LiteralPath $rowsFilePath -Value $uploadedRowsJson -Encoding UTF8

          Write-Host "##[section]✅ All uploads completed successfully"
        } catch {
          Write-Host "##[error]Upload process failed: $($_.Exception.Message)"

          $projectVersionPairs = @()
          foreach ($row in $resultRows) { $projectVersionPairs += @{ Project = $row.Project; Version = $row.Version } }
          $uploadedRowsJson = ($projectVersionPairs | ConvertTo-Json -Compress)
          if (-not $uploadedRowsJson) { $uploadedRowsJson = '[]' }

          Write-Host "##vso[task.setvariable variable=uploadedRowsJson;isOutput=true]$uploadedRowsJson"
          $rowsFilePath = Join-Path $env:AGENT_TEMPDIRECTORY 'dt-uploaded-rows.json'
          Set-Content -LiteralPath $rowsFilePath -Value $uploadedRowsJson -Encoding UTF8

          if ("${{ parameters.failOnUploadError }}" -eq "True") { exit 1 } else { exit 0 }
        }
