# Template: build project tags from environment variables (fail-closed when required)
parameters:
  - name: requireProjectTags
    type: boolean
    default: true  # if true, empty/invalid tags cause the step to fail

steps:
  # Step: Build project tags
  # - Uses PowerShell to construct a list of project tags based on environment variables
  # - Optionally includes a tag for the environment (`env:$env:ENV_NAME`) when ENV_NAME is set
  # - Optionally includes additional tags from the `ADDITIONAL_TAGS` environment variable
  # - Deduplicates tags and converts them into a CSV format
  # - Sets the resulting CSV as an output variable `projectTagsCsv` for use in subsequent steps
  - task: PowerShell@2
    displayName: "Build project tags"
    name: buildTags
    inputs:
      pwsh: true
      targetType: inline
      script: |
        $ErrorActionPreference = 'Stop'
        $tags = New-Object System.Collections.Generic.List[string]

        # Optional env tag
        if ($env:ENV_NAME -and -not [string]::IsNullOrWhiteSpace($env:ENV_NAME)) {
          $tags.Add("env:$env:ENV_NAME")
        } else {
          Write-Host "ENV_NAME not set; env:<ENV_NAME> tag will be omitted."
        }

        # Optional extras
        if ($env:ADDITIONAL_TAGS -and $env:ADDITIONAL_TAGS.Trim().Length -gt 0) {
          $extraTags = $env:ADDITIONAL_TAGS -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ }
          foreach ($t in $extraTags) { $tags.Add($t) }
        }

        # Dedup & CSV
        $tagsCsv = ''
        if ($tags.Count -gt 0) {
          $seen=@{}; $deduped = $tags | Where-Object { if ($seen.ContainsKey($_)) {$false} else {$seen[$_]=$true; $true} }
          $tagsCsv = $deduped -join ','
        }

        # If requireProjectTags=true, fail only when there are no tags at all
        if ("${{ parameters.requireProjectTags }}" -eq "True") {
          if ([string]::IsNullOrWhiteSpace($tagsCsv)) {
            throw "No project tags produced."
          }
        } elseif ([string]::IsNullOrWhiteSpace($tagsCsv)) {
          Write-Warning "No project tags produced (requireProjectTags=false)."
        }

        Write-Host "Final projectTags CSV: '$tagsCsv'"
        Write-Host "##vso[task.setvariable variable=projectTagsCsv;isOutput=true]$tagsCsv"
