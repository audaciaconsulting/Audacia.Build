# Template: deactivate all non-latest active versions (optionally scoping by env tag)
parameters:
  - name: artifactName
    type: string
    default: 'sbom-files'
  - name: tryDownloadArtifact
    type: boolean
    default: true

steps:
  - checkout: none

  - ${{ if eq(parameters.tryDownloadArtifact, true) }}:
      - task: DownloadPipelineArtifact@2
        displayName: "Try to download SBOM artifact (optional)"
        inputs:
          artifact: ${{ parameters.artifactName }}
          path: $(Agent.TempDirectory)/sbom
          buildType: current
        continueOnError: true
        condition: always()

  - task: PowerShell@2
    displayName: "Deactivate non-latest versions in Dependency-Track"
    env:
      DT_API_URL: $(DT_API_URL)
      DT_API_KEY: $(DT_API_KEY)
      ENV_NAME: $(ENV_NAME)
      ADDITIONAL_TAGS: $(ADDITIONAL_TAGS)
    inputs:
      pwsh: true
      targetType: inline
      script: |
        $ErrorActionPreference = 'Stop'

        function Derive-ProjectNamesFromSboms([string]$root) {
          $names = New-Object System.Collections.Generic.List[string]
          if (-not (Test-Path $root)) { return @() }
          $files = Get-ChildItem -Path $root -Recurse -Filter *.json -File -EA SilentlyContinue
          foreach ($f in $files) {
            try {
              $name = (Get-Content -Raw -LiteralPath $f.FullName | ConvertFrom-Json -ea Stop).metadata.component.name
              if ($name) { $names.Add($name) }
            } catch { }
          }
          return ($names | Select-Object -Unique)
        }

        Add-Type -AssemblyName System.Net.Http
        $http = [System.Net.Http.HttpClient]::new()
        $http.Timeout = [TimeSpan]::FromMinutes(10)
        $http.DefaultRequestHeaders.Add('X-Api-Key', "$(DT_API_KEY)")

        function Invoke-DtApi([string]$method, [string]$path, [object]$body=$null) {
          $base = "$(DT_API_URL)".TrimEnd('/')
          $uri  = "$base$path"
          $msg  = New-Object System.Net.Http.HttpRequestMessage($method, $uri)
          if ($body -ne $null) {
            $json = $body | ConvertTo-Json -Depth 8
            $msg.Content = New-Object System.Net.Http.StringContent($json, [Text.Encoding]::UTF8, 'application/json')
          }
          $msg.Headers.Add('X-Api-Key', "$(DT_API_KEY)")
          $resp = $http.SendAsync($msg).GetAwaiter().GetResult()
          if (-not $resp.IsSuccessStatusCode) {
            $text = $resp.Content.ReadAsStringAsync().GetAwaiter().GetResult()
            throw "API $method $path failed ($($resp.StatusCode)): $text"
          }
          return $resp.Content.ReadAsStringAsync().GetAwaiter().GetResult()
        }

        function Get-ProjectsByName([string]$name) {
          $results = @()
          $page=1
          while ($true) {
            $json = Invoke-DtApi GET "/v1/project?name=$([uri]::EscapeDataString($name))&pageSize=500&page=$page"
            $arr = @()
            if ($json) { $arr = $json | ConvertFrom-Json }
            if (-not $arr -or $arr.Count -eq 0) { break }
            $results += $arr
            if ($arr.Count -lt 500) { break }
            $page++
          }
          return $results
        }

        function Has-Tag([object]$proj, [string]$tag) {
          if (-not $proj -or -not $proj.tags) { return $false }
          $tags = $proj.tags
          foreach ($t in $tags) {
            if ($t -is [string]) { if ($t -eq $tag) { return $true } }
            elseif ($t.PSObject.Properties.Name -contains 'name') { if ($t.name -eq $tag) { return $true } }
          }
          return $false
        }

        function Deactivate-NonLatest-ByName([string]$name, [string]$envTag=$null) {
          $projs = Get-ProjectsByName -name $name

          if ($envTag) {
            $projs_env = $projs | Where-Object { Has-Tag $_ $envTag }
            if ($projs_env.Count -gt 0) { $projs = $projs_env }
          }

          $targets = $projs | Where-Object {
            $isActive = ($_.PSObject.Properties.Name -contains 'active') ? ($_.active -ne $false) : $true
            return $isActive -and ($_.isLatest -ne $true)
          }

          $ok=0; $fail=0
          foreach ($p in $targets) {
            try {
              Write-Host "Deactivating: $($p.name) $($p.version) (uuid=$($p.uuid))"
              [void](Invoke-DtApi PATCH "/v1/project/$($p.uuid)" @{ active = $false })
              $ok++
            } catch {
              $fail++
              $msg = $_.Exception.Message
              if ($msg -match '(?i)forbidden|403') {
                Write-Warning "Deactivate failed (Forbidden). Ensure DT_API_KEY has Project/Portfolio permissions and access to this project/tags. UUID=$($p.uuid)"
              } else {
                Write-Warning "Deactivate failed for UUID=$($p.uuid): $msg"
              }
            }
          }
          return @{ ok = $ok; fail = $fail; considered = ($targets | Measure-Object).Count }
        }

        $derived = Derive-ProjectNamesFromSboms "$(Agent.TempDirectory)/sbom"
        if ($derived.Count -eq 0) {
          Write-Warning "No SBOMs available to derive project names. Nothing to deactivate."
          exit 0
        }

        Write-Host "Projects to check: $($derived -join ', ')"
        $envTag = "env:$(ENV_NAME)"

        $totalOk=0; $totalFail=0; $totalConsidered=0
        foreach ($name in $derived) {
          Write-Host "##[group]Processing name: $name"
          $res = Deactivate-NonLatest-ByName -name $name -envTag $envTag
          $totalOk += $res.ok
          $totalFail += $res.fail
          $totalConsidered += $res.considered
          Write-Host "##[endgroup]"
        }

        Write-Host "##[section]Deactivation summary â†’ considered=$totalConsidered, deactivated=$totalOk, failed=$totalFail"
