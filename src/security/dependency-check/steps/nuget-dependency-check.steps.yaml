# Steps to run a .NET dependency check
parameters:
  - name: projectName
    default: 'Build .NET'
  - name: publishAs
    default: ''
  - name: runEvenIfError
    default: false
  - name: continueIfVulnerabilities # Should the pipeline continue if vulnerabilities are found?
    default: false
  - name: suppressionsFilePath
    default: '$(Build.SourcesDirectory)/suppressions.xml'

steps:
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'
  # Step 1: Set suppressionsPath (runtime variable)
  - task: PowerShell@2
    name: setVars
    displayName: Find Suppressions File
    condition: or(succeeded(), and(eq('${{parameters.runEvenIfError}}', true), succeededOrFailed()))
    inputs:
    targetType: inline
    pwsh: true
    script: |
      Write-Host "Checking for: ${{parameters.suppressionsFilePath}}"

      if (Test-Path "${{parameters.suppressionsFilePath}}") {
        Write-Host "Suppressions file found"
        Write-Host "##vso[task.setvariable variable=suppressionsPath]${{parameters.suppressionsFilePath}}"
        Write-Host "##vso[task.setvariable variable=hasSuppression]true"
      }
      else {
        Write-Host "Suppressions file not found"
        Write-Host "##vso[task.setvariable variable=hasSuppression]false"
      }

# Step 2a: Dependency check WITH suppressions
  - task: dependency-check-build-task@6
    displayName: .NET Dependency Check (with suppressions)
    condition: and(succeeded(), eq(variables['hasSuppression'], 'true'))
    continueOnError: ${{parameters.continueIfVulnerabilities}}
    inputs:
    projectName: ${{parameters.projectName}}
    scanPath: '**/*.csproj'
    format: 'HTML,JUNIT'
    failOnCVSS: '1'
    additionalArguments: '--nvdApiKey "cb027565-2f22-4e16-8992-9bf0a9a0cadc"'
    suppressionPath: '$(suppressionsPath)'

# Step 2b: Dependency check WITHOUT suppressions
  - task: dependency-check-build-task@6
    displayName: .NET Dependency Check (no suppressions)
    condition: and(succeeded(), ne(variables['hasSuppression'], 'true'))
    continueOnError: ${{parameters.continueIfVulnerabilities}}
    inputs:
    projectName: ${{parameters.projectName}}
    scanPath: '**/*.csproj'
    format: 'HTML,JUNIT'
    failOnCVSS: '1'
    additionalArguments: '--nvdApiKey "cb027565-2f22-4e16-8992-9bf0a9a0cadc"'
    # Check if report exists, when not skipped and artifact name provided
  - powershell: |
      if (Test-Path $(Common.TestResultsDirectory)\dependency-check\dependency-check-report.html) {
        echo "##vso[task.setVariable variable=ReportExists]true"
      }
    displayName: Check for Dependency Check Report
    condition: and(succeededOrFailed(), ne('${{parameters.publishAs}}', ''))

    # Republish report to unique artifact
  - publish: $(Common.TestResultsDirectory)\dependency-check
    condition: eq(variables.ReportExists, 'true')
    displayName: Republish Dependency Check Report
    artifact: ${{parameters.publishAs}}

  - task: PublishTestResults@2
    displayName: "Publish JUnit Results"
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/dependency-check-junit.xml'
      testRunTitle: ${{parameters.publishAs}}
      searchFolder: $(Common.TestResultsDirectory)\dependency-check\
      failTaskOnFailedTests: true
