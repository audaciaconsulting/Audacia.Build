parameters:
  - name: serviceConnectionName # The name of the service connection used to deploy to Azure
    type: string
  - name: slotName # The name of the slot to deploy to, that will be swapped into production
    default: 'Staging'
  - name: resourceGroupName # The name of the resource group the app services are in
    type: string
  - name: appServices # The names of the app services to swap the slots in
    default: []
    type: object

steps:
  - task: AzureCLI@2
    displayName: 'Swap Slots'
    inputs:
      azureSubscription: ${{parameters.serviceConnectionName}}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ResourceNames = '${{convertToJson(parameters.appServices)}}' | ConvertFrom-Json;
        # Filter out empty or whitespace-only service names
        $ResourceNames = $ResourceNames | Where-Object { -not [string]::IsNullOrWhiteSpace($_) }

        # Ensure at least one app service is specified
        if ($ResourceNames.Count -eq 0) {
            throw "No app services specified. At least one app service name must be provided."
        }

        $ResourceGroupName = '${{parameters.resourceGroupName}}'
        $slotName = '${{parameters.slotName}}'
        $slotSwapCompleted = [System.Collections.Concurrent.ConcurrentBag[string]]::new()
        $slotSwapErrored = [System.Collections.Concurrent.ConcurrentBag[string]]::new()

        $ResourceNames | ForEach-Object -Parallel {
            $target = $_
            try {
                Write-Host "Starting swap for $target"
                az webapp deployment slot swap -g $using:ResourceGroupName -n $target --slot $using:slotName --target-slot production | ConvertFrom-Json
        
                if (!$?) 
                {
                    throw "Swap failed for $target"            
                } 
                else 
                {
                    ($using:slotSwapCompleted).Add($target)
                    Write-Host "Completed swap for $target successfully"
                }
            } 
            catch 
            {
                Write-Host "Exception during swap for $($target): $_"
                ($using:slotSwapErrored).Add($target)
            }
        }

        Write-Host "Slots swapped successfully: $($slotSwapCompleted.Count)"
        Write-Host "Slot swap errors: $($slotSwapErrored.Count)"

        if($slotSwapErrored.Count -gt 0)
        {
            $slotSwapCompleted | ForEach-Object {
                $target = $_
                Write-Host "Reversing slot swap for $target"
                az webapp deployment slot swap -g $ResourceGroupName -n $target --slot $slotName --target-slot production | ConvertFrom-Json
            }
            exit 1
        } 
        else 
        {
            exit 0
        }